<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天赐</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiongtianci-tc.github.io/"/>
  <updated>2019-05-26T09:17:54.328Z</updated>
  <id>http://xiongtianci-tc.github.io/</id>
  
  <author>
    <name>天赐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试Travis CI自动部署</title>
    <link href="http://xiongtianci-tc.github.io/2019/05/26/%E6%B5%8B%E8%AF%95Travis-CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://xiongtianci-tc.github.io/2019/05/26/测试Travis-CI自动部署/</id>
    <published>2019-05-26T09:09:56.000Z</published>
    <updated>2019-05-26T09:17:54.328Z</updated>
    
    <content type="html"><![CDATA[<p>Travis CI部署测试~</p>]]></content>
    
    <summary type="html">
    
      
      
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo基本命令</title>
    <link href="http://xiongtianci-tc.github.io/2019/05/25/Hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://xiongtianci-tc.github.io/2019/05/25/Hexo基本命令/</id>
    <published>2019-05-25T02:04:49.000Z</published>
    <updated>2019-05-26T03:38:05.152Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 写文章</span><br><span class="line">hexo n</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成</span><br><span class="line">hexo g </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>部署 # 可与hexo g合并为 hexo d -g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="http://xiongtianci-tc.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>重新搭建博客</title>
    <link href="http://xiongtianci-tc.github.io/2019/05/20/%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xiongtianci-tc.github.io/2019/05/20/重新搭建博客/</id>
    <published>2019-05-20T12:49:00.000Z</published>
    <updated>2019-05-26T04:24:49.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>3月份初，许久没写博客（主要就是懒）的博主在莫一天心血来潮写好一篇文章后，使用<code>hexo d</code>部署博客文章时，发现<code>hexo</code>抛出各种错误。但由于当时准备面试的面试题（主要就是懒），然后就放着没管它。紧接着面试实习岗位，工作后也一直没有闲下来。<br>最近终于抽出时间来重构博客，写下这篇文章，记录一下重构博客的过程~</p><h2 id="博客目录介绍"><a href="#博客目录介绍" class="headerlink" title="博客目录介绍"></a>博客目录介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><ul><li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><li>public：执行hexo generate命令，输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</li><li>_drafts：草稿文章</li><li>_posts：发布文章</li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的 关于 按钮</li></ul><p>接下来是重头戏 _config.yml ，做个简单说明：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/configure.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site #整站的基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">不如</span> <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">码农，程序猿，未来的昏析师</span> <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">bruce</span> <span class="string">sha's</span> <span class="string">blog</span> <span class="string">| java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</span></span><br><span class="line"><span class="string"></span><span class="attr">author:</span> <span class="string">bruce</span> <span class="comment">#网站作者，在下方显示</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">bu.ru@qq.com</span> <span class="comment">#联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL #域名和文件结构</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://ibruce.info</span> <span class="comment">#你的域名</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing #写文章选项</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#默认layout方式</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span> <span class="comment"># Add spaces between asian characters and western characters</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">max_open_file:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">multi_thread:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight:</span> <span class="comment">#代码高亮</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment">#是否启用</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">false</span> <span class="comment">#是否显示行号</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag #分类与标签</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># default</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</span></span><br><span class="line"><span class="comment">## 2: Enable pagination</span></span><br><span class="line"><span class="comment">## 1: Disable pagination</span></span><br><span class="line"><span class="comment">## 0: Fully Disable</span></span><br><span class="line"><span class="attr">archive:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">category:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">tag:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server #本地服务参数</span></span><br><span class="line"><span class="comment">## Hexo uses Connect as a server</span></span><br><span class="line"><span class="comment">## You can customize the logger format as defined in</span></span><br><span class="line"><span class="comment">## http://www.senchalabs.org/connect/logger.html</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line"><span class="attr">logger:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logger_format:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format #日期显示格式</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">MMM</span> <span class="string">D</span> <span class="string">YYYY</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">H:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination #分页设置</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment">#每页10篇文章</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus #社会化评论disqus，我使用多说，在主题中配置</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions #插件，暂时未安装插件</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="comment">## 主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">modernist</span> <span class="comment"># raytaylorism # pacman # modernist # light</span></span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment #部署</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:bruce-sha/bruce-sha.github.com.git</span> <span class="comment">#你的GitHub Pages仓库</span></span><br></pre></td></tr></table></figure><h2 id="主题目录介绍"><a href="#主题目录介绍" class="headerlink" title="主题目录介绍"></a>主题目录介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── languages          #多语言</span><br><span class="line">|   ├── default.yml    #默认语言</span><br><span class="line">|   └── zh-CN.yml      #中文语言</span><br><span class="line">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><br><span class="line">|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制</span><br><span class="line">|   └── _widget        #小挂件的布局，页面下方小挂件的控制</span><br><span class="line">├── source             #源码</span><br><span class="line">|   ├── css            #css源码 </span><br><span class="line">|   |   ├── _base      #*.styl基础css</span><br><span class="line">|   |   ├── _partial   #*.styl局部css</span><br><span class="line">|   |   ├── fonts      #字体</span><br><span class="line">|   |   ├── images     #图片</span><br><span class="line">|   |   └── style.styl #*.styl引入需要的css源码</span><br><span class="line">|   ├── fancybox       #fancybox效果源码</span><br><span class="line">|   └── js             #javascript源代码</span><br><span class="line">├── _config.yml        #主题配置文件</span><br><span class="line">└── README.md          #用GitHub的都知道</span><br></pre></td></tr></table></figure><p>如果你需要修改头部，直接修改 <code>hexo\themes\modernist\layout\_partial\header.ejs</code> ，比如头上加个搜索框：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</span><br><span class="line"> &lt;input type=&quot;search&quot; name=&quot;q&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;</span><br><span class="line"> &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\/\//, &apos;&apos;) %&gt;&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>将如上代码加入即可，您需要修改css以便这个搜索框比较美观。<br>再如，你要修改页脚版权信息，直接编辑 <code>hexo\themes\modernist\layout\_partial\footer.ejs</code>。同理，你需要修改css，直接去修改对应位置的styl文件。</p><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><blockquote><p><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">https://www.haomwei.com/technology/maupassant-hexo.html</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line"><span class="meta">$</span> npm install hexo-renderer-pug --save</span><br><span class="line"><span class="meta">$</span> npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><blockquote><p><code>npm install hexo-renderer-pug --save</code>安装时可能会报错，以下是解决方案：<br>改用cnpm来安装软件</p><blockquote><p>$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>目的是直接改npm为淘宝的npm，也为防止某些依赖直接用npm来安装，导致无法顺利安装完成<br>$ npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote></blockquote><p>编辑Hexo目录下的 <code>_config.yml</code>，将<code>theme</code>的值改为<code>maupassant</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">matery</span></span><br></pre></td></tr></table></figure><h1 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否启用Fancybox图片灯箱效果</span></span><br><span class="line"><span class="comment"># Disqus评论 shortnam</span></span><br><span class="line"><span class="attr">disqus:</span> </span><br><span class="line"><span class="comment"># 友言评论 id</span></span><br><span class="line"><span class="attr">uyan:</span> </span><br><span class="line"><span class="comment"># 来必力评论 data-uid</span></span><br><span class="line"><span class="attr">livere:</span> </span><br><span class="line"><span class="comment"># 畅言评论 appid</span></span><br><span class="line"><span class="attr">changyan:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">changyan_conf:</span> <span class="comment">## Your changyan conf, e.g. prod_d8a508c2825ab57eeb43e7c69bba0e8b</span></span><br><span class="line"><span class="comment"># Gitment评论相关参数</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  owner:</span> </span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">  client_id:</span> </span><br><span class="line"><span class="attr">  client_secret:</span> </span><br><span class="line"><span class="comment"># Gitalk评论相关参数</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">  owner:</span>  </span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">  client_id:</span>  </span><br><span class="line"><span class="attr">  client_secret:</span>  </span><br><span class="line"><span class="attr">  admin:</span>  </span><br><span class="line"><span class="comment"># Valine评论相关参数</span></span><br><span class="line"><span class="attr">valine:</span> </span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">  appid:</span> </span><br><span class="line"><span class="attr">  appkey:</span> </span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># 评论系统中的邮件提醒设置</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment">## Validation code.</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Just</span> <span class="string">so</span> <span class="string">so</span> </span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">'mm'</span> </span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span></span><br><span class="line"><span class="comment"># 默认使用Google搜索引擎</span></span><br><span class="line"><span class="attr">google_search:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 若想使用百度搜索，将其设定为 true</span></span><br><span class="line"><span class="attr">baidu_search:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Swiftype 站内搜索key</span></span><br><span class="line"><span class="attr">swiftype:</span> </span><br><span class="line"><span class="comment"># 微搜索 key</span></span><br><span class="line"><span class="attr">tinysou:</span> </span><br><span class="line"><span class="comment"># 基于jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用</span></span><br><span class="line"><span class="attr">self_search:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Google Analytics 跟踪ID</span></span><br><span class="line"><span class="attr">google_analytics:</span> </span><br><span class="line"><span class="comment"># 百度统计 跟踪ID</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span> <span class="comment">## If you want to use fancybox please set the value to true.</span></span><br><span class="line"><span class="comment"># 是否显示侧边栏分类数目</span></span><br><span class="line"><span class="attr">show_category_count:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 是否显示文章中目录列表自动编号</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#  是否使用分享按鈕，需要安装hexo-helper-qrcode插件使用</span></span><br><span class="line"><span class="attr">shareto:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#  是否使用不蒜子页面访问计数</span></span><br><span class="line"><span class="attr">busuanzi:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="attr">wordcount:</span> <span class="literal">false</span> <span class="comment">## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed.</span></span><br><span class="line"><span class="comment"># 是否在移动设备屏幕底部显示侧边栏</span></span><br><span class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">false</span> <span class="comment">## Set to true to enable widgets on small screens.</span></span><br><span class="line"><span class="comment"># 是否使用canvas动态背景</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  color:</span> <span class="comment">## RGB value of the color, e.g. "100,99,98"</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="comment">## Transparency of lines, e.g. "0.7"</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="comment">## The z-index property of the background, e.g. "-1"</span></span><br><span class="line"><span class="attr">  count:</span> <span class="comment">## Quantity of lines, e.g. "150"</span></span><br><span class="line"><span class="comment"># 是否启用捐赠按钮</span></span><br><span class="line"><span class="attr">donate:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  github:</span> <span class="comment">## GitHub URL, e.g. https://github.com/Kaiyuan/donate-page</span></span><br><span class="line"><span class="attr">  alipay_qr:</span> <span class="comment">## Path of Alipay QRcode image, e.g. /img/AliPayQR.png</span></span><br><span class="line"><span class="attr">  wechat_qr:</span> <span class="comment">## Path of Wechat QRcode image, e.g. /img/WeChatQR.png</span></span><br><span class="line"><span class="attr">  btc_qr:</span> <span class="comment">## Path of Bitcoin QRcode image, e.g. /img/BTCQR.png</span></span><br><span class="line"><span class="attr">  btc_key:</span> <span class="comment">## Bitcoin key, e.g. 1KuK5eK2BLsqpsFVXXSBG5wbSAwZVadt6L</span></span><br><span class="line"><span class="attr">  paypal_url:</span> <span class="comment">## Paypal URL, e.g. https://www.paypal.me/tufu9441</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> <span class="comment">## If you want to display the copyright info after each post, please set the value to true and fill the following items on your need.</span></span><br><span class="line"><span class="attr">  author:</span> <span class="comment">## Your author name, e.g. tufu9441</span></span><br><span class="line"><span class="attr">  copyright_text:</span> <span class="comment">## Your copyright text, e.g. The author owns the copyright, please indicate the source reproduced.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义页面及菜单，依照已有格式填写。</span></span><br><span class="line"><span class="comment"># 填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。</span></span><br><span class="line"><span class="comment"># 导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照相关说明使用。</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">about/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择和排列希望使用的侧边栏小工具</span></span><br><span class="line"><span class="attr">widgets:</span> <span class="comment">## Six widgets in sidebar provided: search, category, tag, recent_posts, rencent_comments and links.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">search</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">category</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tag</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">recent_posts</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">recent_comments</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">links</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友情链接，请依照格式填写</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  - title:</span> <span class="string">site-name1</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">http://www.example1.com/</span></span><br><span class="line"><span class="attr">  - title:</span> <span class="string">site-name2</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">http://www.example2.com/</span></span><br><span class="line"><span class="attr">  - title:</span> <span class="string">site-name3</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">http://www.example3.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站历史时间线，在页面front-matter中设置layout: timeline可显示</span></span><br><span class="line"><span class="attr">timeline:</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    word:</span> <span class="number">2014</span><span class="string">/06/12-Start</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    word:</span> <span class="number">2014</span><span class="string">/11/29-XXX</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    word:</span> <span class="number">2015</span><span class="string">/02/18-DDD</span></span><br><span class="line"><span class="attr">  - num:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    word:</span> <span class="string">More</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files</span></span><br><span class="line"><span class="comment"># 静态文件存储路径，方便设置CDN缓存</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Theme version</span></span><br><span class="line"><span class="comment"># 主题版本，便于静态文件更新后刷新CDN缓存</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><h3 id="Disqus配置使用"><a href="#Disqus配置使用" class="headerlink" title="Disqus配置使用"></a>Disqus配置使用</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><blockquote><p><a href="https://link.jianshu.com/?t=https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a></p></blockquote><h1 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h1><h2 id="主题目录结构"><a href="#主题目录结构" class="headerlink" title="主题目录结构"></a>主题目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-maupassant</span><br><span class="line">|-languages</span><br></pre></td></tr></table></figure><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><p>网站Favicon：<code>/blog/source/favicon.ico</code>，建议的大小：<code>32px*32px</code>。</p>]]></content>
    
    <summary type="html">
    
      记录一次重构个人博客
    
    </summary>
    
      <category term="技术笔记" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="博客记录" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="http://xiongtianci-tc.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MySQL面试题</title>
    <link href="http://xiongtianci-tc.github.io/2019/01/02/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://xiongtianci-tc.github.io/2019/01/02/MySQL面试题/</id>
    <published>2019-01-02T12:05:58.000Z</published>
    <updated>2019-05-25T02:54:34.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-主键-超键-候选键-外键"><a href="#1-主键-超键-候选键-外键" class="headerlink" title="1. 主键 超键 候选键 外键"></a>1. 主键 超键 候选键 外键</h1><p><strong>主 键：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。</span><br><span class="line">一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）</span><br></pre></td></tr></table></figure><p><strong>超 键：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在关系中能唯一标识元组的属性集称为关系模式的超键</span><br><span class="line">一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键</span><br><span class="line">超键包含候选键和主键。</span><br></pre></td></tr></table></figure><p><strong>候选键：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是最小超键，即没有冗余元素的超键。</span><br></pre></td></tr></table></figure><p><strong>外 键：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一个表中存在的另一个表的主键称此表的外键</span><br></pre></td></tr></table></figure><h1 id="2-数据库事务的四个特性及含义"><a href="#2-数据库事务的四个特性及含义" class="headerlink" title="2.数据库事务的四个特性及含义"></a>2.数据库事务的四个特性及含义</h1><blockquote><p>数据库事务( transanction )正确执行的四个基本要素( ACID )：原子性(Atomicity)、一致性(Correspondence)、隔离性(Isolation)、持久性(Durability)。</p></blockquote><p><strong>原子性</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</span><br></pre></td></tr></table></figure><p><strong>一致性</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。</span><br></pre></td></tr></table></figure><p><strong>隔离性</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</span><br></pre></td></tr></table></figure><p><strong>持久性</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</span><br></pre></td></tr></table></figure><h1 id="3-drop-delete与truncate的区别"><a href="#3-drop-delete与truncate的区别" class="headerlink" title="3.drop,delete与truncate的区别"></a>3.drop,delete与truncate的区别</h1><blockquote><p>drop直接删掉表<br>delete删除表中数据，可以加where字句<br>truncate删除表中数据，再插入时自增长id又从1开始</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、DELETE语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行回滚操作。TRUNCATE TABLE 则一次性地从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除的数据是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。</span><br><span class="line"></span><br><span class="line">2、表和索引所占空间。当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，而DELETE操作不会减少表或索引所占用的空间。drop语句将表所占用的空间全释放掉。</span><br><span class="line"></span><br><span class="line">3、一般而言，drop &gt; truncate &gt; delete</span><br><span class="line"></span><br><span class="line">4、应用范围。truncate 只能对 table；delete 可以是table和view</span><br><span class="line"></span><br><span class="line">5、truncate 和 DELETE 只删除数据，而DROP则删除整个表（结构和数据）。</span><br><span class="line"></span><br><span class="line">6、truncate与不带where的delete ：只删除数据，而不删除表的结构（定义）drop语句将删除表的结构被依赖的约束（constrain),触发器（trigger)索引（index);依赖于该表的存储过程/函数将被保留，但其状态会变为：invalid。</span><br><span class="line"></span><br><span class="line">7、delete语句为DML（data maintain Language),这个操作会被放到 rollback segment中,事务提交后才生效。如果有相应的 tigger,执行的时候将被触发。</span><br><span class="line"></span><br><span class="line">8、truncate、drop是DLL（data define language),操作立即生效，原数据不放到 rollback segment中，不能回滚</span><br><span class="line"></span><br><span class="line">9、在没有备份情况下，谨慎使用 drop 与 truncate。要删除部分数据行采用delete且注意结合where来约束影响范围。回滚段要足够大。要删除表用drop;若想保留表而将表中数据删除，如果于事务无关，用truncate即可实现。如果和事务有关，或老师想触发trigger,还是用delete。</span><br><span class="line"></span><br><span class="line">10、Truncate table 表名 速度快,而且效率高,因为:</span><br><span class="line">truncate table 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</span><br><span class="line"></span><br><span class="line">11、TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 DROP TABLE 语句。</span><br><span class="line"></span><br><span class="line">12、对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。</span><br></pre></td></tr></table></figure><h1 id="4-索引的工作原理及其种类"><a href="#4-索引的工作原理及其种类" class="headerlink" title="4.索引的工作原理及其种类"></a>4.索引的工作原理及其种类</h1><blockquote><p><strong>数据库索引</strong>：是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。<strong>索引的实现通常使用B树及其变种B+树</strong>。<br>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是<strong>索引</strong>。</p></blockquote><p>为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。</p><p><img src="img/1546432394934.png" alt="1546432394934"></p><p>图展示了一种可能的索引方式。左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在O($log_2n$)的复杂度内获取到相应数据。</p><p>创建索引可以大大提高系统的性能。</p><p>第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p><p>第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</p><p>第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</p><p>第四，在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</p><p>第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p><p>也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？因为，增加索引也有许多不利的方面。</p><p>第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</p><p>第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</p><p>第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p><p>索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。<strong>一般来说，应该在这些列上创建索引：</strong>在经常需要搜索的列上，可以加快搜索的速度；在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。</p><p>同样，对于有些列不应该创建索引。<strong>一般来说，不应该创建索引的的这些列具有下列特点：</strong></p><p>第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p><p>第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</p><p>第三，对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</p><p>第四，当修改性能远远大于检索性能时，不应该创建索引。这是因为，<strong>修改性能和检索性能是互相矛盾的</strong>。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</p><p>根据数据库的功能，可以在<a href="http://www.2cto.com/database/" target="_blank" rel="noopener">数据库设计</a>器中创建三种索引：<strong>唯一索引、主键索引和聚集索引</strong>。</p><p><strong>唯一索引</strong></p><p>唯一索引是不允许其中任何两行具有相同索引值的索引。</p><p>当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。 <strong>主键索引</strong> 数据库表经常有一列或列组合，其值唯一标识表中的每一行。该列称为表的主键。 在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。 <strong>聚集索引</strong> 在聚集索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。<strong>一个表只能包含一个聚集索引。</strong></p><p>如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。<strong>与非聚集索引相比，聚集索引通常提供更快的数据访问速度。</strong></p>]]></content>
    
    <summary type="html">
    
      MySQL面试题
    
    </summary>
    
      <category term="数据库" scheme="http://xiongtianci-tc.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://xiongtianci-tc.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>ES6语法指南</title>
    <link href="http://xiongtianci-tc.github.io/2018/12/18/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/"/>
    <id>http://xiongtianci-tc.github.io/2018/12/18/ES6语法指南/</id>
    <published>2018-12-18T08:10:28.000Z</published>
    <updated>2019-05-25T02:53:44.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-语法指南"><a href="#ES6-语法指南" class="headerlink" title="ES6 语法指南"></a>ES6 语法指南</h1><p>后端项目搭建完毕，接下来就是前端页面了。不过在这之前需要一些准备工作。我们需要学习ES6的语法标准。</p><p>什么是ES6？就是ECMAScript第6版标准。</p><h2 id="1-什么是ECMAScript？"><a href="#1-什么是ECMAScript？" class="headerlink" title="1.什么是ECMAScript？"></a>1.什么是ECMAScript？</h2><p>来看下前端的发展历程：</p><blockquote><p>web1.0时代：</p></blockquote><ul><li>最初的网页以HTML为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端单向流通。<strong>开发人员也只关心页面的样式和内容</strong>即可。</li></ul><blockquote><p>web2.0时代：</p></blockquote><ul><li>1995年，网景工程师Brendan Eich 花了10天时间设计了JavaScript语言。</li><li>1996年，微软发布了JScript，其实是JavaScript的逆向工程实现。</li><li>1997年，为了统一各种不同script脚本语言，ECMA（欧洲计算机制造商协会）以JavaScript为基础，制定了<code>ECMAscript</code>标准规范。JavaScript和JScript都是<code>ECMAScript</code>的标准实现者，随后各大浏览器厂商纷纷实现了<code>ECMAScript</code>标准。</li></ul><p>所以，ECMAScript是浏览器脚本语言的规范，而各种我们熟知的js语言，如JavaScript则是规范的具体实现。</p><h2 id="2-ECMAScript的快速发展"><a href="#2-ECMAScript的快速发展" class="headerlink" title="2.ECMAScript的快速发展"></a>2.ECMAScript的快速发展</h2><p>而后，ECMAScript就进入了快速发展期。</p><ul><li><p>1998年6月，ECMAScript 2.0 发布。</p></li><li><p>1999年12月，ECMAScript 3.0 发布。这时，ECMAScript 规范本身也相对比较完善和稳定了，但是接下来的事情，就比较悲剧了。</p></li><li><p>2007年10月。。。。ECMAScript 4.0 草案发布。</p><p>这次的新规范，历时颇久，规范的新内容也有了很多争议。在制定ES4的时候，是分成了两个工作组同时工作的。</p><ul><li>一边是以 Adobe, Mozilla, Opera 和 Google为主的 ECMAScript 4 工作组。</li><li>一边是以 Microsoft 和 Yahoo 为主的 ECMAScript 3.1 工作组。</li></ul><p>ECMAScript 4 的很多主张比较激进，改动较大。而 ECMAScript 3.1 则主张小幅更新。最终经过 TC39 的会议，决定将一部分不那么激进的改动保留发布为 ECMAScript 3.1，而ES4的内容，则延续到了后来的ECMAScript5和6版本中</p></li><li><p>2009年12月，ECMAScript 5 发布。</p></li><li><p>2011年6月，ECMAScript 5.1 发布。</p></li><li><p>2015年6月，ECMAScript 6，也就是 ECMAScript 2015 发布了。 并且从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是ECMAScript6。 </p></li></ul><h2 id="3-ES5和6的一些新特性"><a href="#3-ES5和6的一些新特性" class="headerlink" title="3.ES5和6的一些新特性"></a>3.ES5和6的一些新特性</h2><p>我们这里只把一些常用的进行学习，更详细的大家参考：<a href="http://es6.ruanyifeng.com/?search=reduce&amp;x=0&amp;y=0#README" target="_blank" rel="noopener">阮一峰的ES6教程</a></p><h3 id="3-1-let-和-const-命令"><a href="#3-1-let-和-const-命令" class="headerlink" title="3.1.let 和 const 命令"></a>3.1.let 和 const 命令</h3><blockquote><p>var</p></blockquote><p>之前，js定义变量只有一个关键字：<code>var</code></p><p><code>var</code>有一个问题，就是定义的变量有时会莫名奇妙的成为全局变量。</p><p>例如这样的一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环外："</span> + i)</span><br></pre></td></tr></table></figure><p>你猜下打印的结果是什么？</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526107278999.png?raw=true" alt="1526107278999"></p><blockquote><p>let</p></blockquote><p><code>let</code>所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><p>我们把刚才的<code>var</code>改成<code>let</code>试试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"循环外："</span> + i)</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526107347275.png?raw=true" alt="1526107347275"></p><blockquote><p>const</p></blockquote><p><code>const</code>声明的变量是常量，不能被修改</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526107425000.png?raw=true" alt="1526107425000"></p><h3 id="3-2-字符串扩展"><a href="#3-2-字符串扩展" class="headerlink" title="3.2.字符串扩展"></a>3.2.字符串扩展</h3><blockquote><p>新的API</p></blockquote><p>ES6为字符串扩展了几个新的API：</p><ul><li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li><li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><p>实验一下：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526107640349.png?raw=true" alt="1526107640349"></p><blockquote><p>字符串模板</p></blockquote><p>ES6中提供了`来作为字符串模板标记。我们可以这么玩：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526108070980.png?raw=true" alt="1526108070980"></p><p>在两个`之间的部分都会被作为字符串的值，不管你任意换行，甚至加入js脚本</p><p>键盘是的1的左侧，tab的上侧，esc的正下方</p><h3 id="3-3-解构表达式"><a href="#3-3-解构表达式" class="headerlink" title="3.3.解构表达式"></a>3.3.解构表达式</h3><blockquote><p>数组解构</p></blockquote><p>比如有一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>我想获取其中的值，只能通过角标。ES6可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [x,y,z] = arr;<span class="comment">// x，y，z将与arr中的每个位置对应来取值</span></span><br><span class="line"><span class="comment">// 然后打印</span></span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526109778368.png?raw=true" alt="1526109778368"></p><blockquote><p>对象解构</p></blockquote><p>例如有个person对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构表达式获取值</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age,language&#125; = person;</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(language);</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526109984544.png?raw=true" alt="1526109984544"></p><p>如过想要用其它变量接收，需要额外指定别名：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526110159450.png?raw=true" alt="1526110159450"></p><ul><li><code>{name:n}</code>：name是person中的属性名，冒号后面的n是解构后要赋值给的变量。</li></ul><h3 id="3-4-函数优化"><a href="#3-4-函数优化" class="headerlink" title="3.4.函数优化"></a>3.4.函数优化</h3><blockquote><p>函数参数默认值</p></blockquote><p>在ES6以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断b是否为空，为空就给默认值1</span></span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>现在可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a , b = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数</p></blockquote><p>ES6中定义函数的简写方式：</p><p>一个参数时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="keyword">var</span> print2 = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>多个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数的情况：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br></pre></td></tr></table></figure><p>代码不止一行，可以用<code>{}</code>括起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对象的函数属性简写</p></blockquote><p>比如一个Person对象，里面有eat方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="comment">// 以前：</span></span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 箭头函数版：</span></span><br><span class="line">    eat2: <span class="function"><span class="params">food</span> =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">"在吃"</span> + food),<span class="comment">// 这里拿不到this</span></span><br><span class="line">    <span class="comment">// 简写版：</span></span><br><span class="line">    eat3(food)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在吃"</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数结合解构表达式</p></blockquote><p>比如有一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name:<span class="string">"jack"</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    language: [<span class="string">'java'</span>,<span class="string">'js'</span>,<span class="string">'css'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + person.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用箭头函数和解构表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hi = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span>  <span class="built_in">console</span>.log(<span class="string">"hello,"</span> + name);</span><br></pre></td></tr></table></figure><h3 id="3-5-map和reduce"><a href="#3-5-map和reduce" class="headerlink" title="3.5.map和reduce"></a>3.5.map和reduce</h3><p>数组中新增了map和reduce方法。</p><blockquote><p>map</p></blockquote><p><code>map()</code>：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p><p>举例：有一个字符串数组，我们希望转为int数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>,<span class="string">'20'</span>,<span class="string">'-5'</span>,<span class="string">'3'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line">arr = arr.map(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">parseInt</span>(s));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure><p>  <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526110796839.png?raw=true" alt="1526110796839"></p><blockquote><p>reduce</p></blockquote><p><code>reduce()</code>：接收一个函数（必须）和一个初始值（可选），该函数接收两个参数：</p><ul><li>第一个参数是上一次reduce处理的结果</li><li>第二个参数是数组中要处理的下一个元素</li></ul><p><code>reduce()</code>会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1,20,-5,3]</span><br></pre></td></tr></table></figure><p>没有初始值：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526111537204.png?raw=true" alt="1526111537204"></p><p>指定初始值：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526111580742.png?raw=true" alt="1526111580742"></p><h3 id="3-6-promise"><a href="#3-6-promise" class="headerlink" title="3.6.promise"></a>3.6.promise</h3><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>感觉跟java的Future类很像啊，有木有！</p><p>我们可以通过Promise的构造函数来创建Promise对象，并在内部封装一个异步执行的结果。</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... 执行异步操作</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);<span class="comment">// 调用resolve，代表Promise将返回成功的结果</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);<span class="comment">// 调用reject，代表Promise会返回失败结果</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，在promise中就封装了一段异步执行的结果。</p><p>如果我们想要等待异步执行完成，做一些事情，我们可以通过promise的then方法来实现,语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 异步执行成功后的回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果想要处理promise异步执行失败的事件，还可以跟上catch：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 异步执行成功后的回调</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 异步执行失败后的回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const p = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    // 这里我们用定时任务模拟异步</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        const num = Math.random();</span><br><span class="line">        // 随机返回成功或失败</span><br><span class="line">        if (num &lt; 0.5) &#123;</span><br><span class="line">            resolve(&quot;成功！num:&quot; + num)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            reject(&quot;出错了！num:&quot; + num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 300)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 调用promise</span><br><span class="line">p.then(function (msg) &#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;).catch(function (msg) &#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526113115887.png?raw=true" alt="1526113115887"></p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526113140074.png?raw=true" alt="1526113140074"></p><h3 id="3-7-set和map（了解）"><a href="#3-7-set和map（了解）" class="headerlink" title="3.7.set和map（了解）"></a>3.7.set和map（了解）</h3><p>ES6提供了Set和Map的数据结构。</p><p>Set，本质与数组类似。不同在于Set中只能保存不同元素，如果元素相同会被忽略。跟java很像吧。</p><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set构造函数可以接收一个数组或空</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line"><span class="keyword">set</span>.add(1);// [1]</span><br><span class="line">// 接收数组</span><br><span class="line">let set2 = new Set([2,3,4,5,5]);// 得到[2,3,4,5]</span><br></pre></td></tr></table></figure><p>普通方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set.add(1);// 添加</span><br><span class="line">set.clear();// 清空</span><br><span class="line">set.delete(2);// 删除指定元素</span><br><span class="line">set.has(2); // 判断是否存在</span><br><span class="line">set.keys();// 返回所有key</span><br><span class="line">set.values();// 返回所有值</span><br><span class="line">set.entries();// 返回键值对集合</span><br><span class="line">// 因为set没有键值对，所有其keys、values、entries方法返回值一样的。</span><br><span class="line">set.size; // 元素个数。是属性，不是方法。</span><br></pre></td></tr></table></figure><p>map，本质是与Object类似的结构。不同在于，Object强制规定key只能是字符串。而Map结构的key可以是任意对象。即：</p><ul><li>object是 &lt;string,object&gt;集合</li><li>map是&lt;object,object&gt;集合</li></ul><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map接收一个数组，数组中的元素是键值对数组</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'key1'</span>,<span class="string">'value1'</span>],</span><br><span class="line">    [<span class="string">'key2'</span>,<span class="string">'value2'</span>],</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 或者接收一个set</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([</span><br><span class="line">    ['key1','value1'],</span><br><span class="line">    ['key2','value2'],</span><br><span class="line">])</span><br><span class="line">const map2 = new Map(<span class="keyword">set</span>)</span><br><span class="line">// 或者其它map</span><br><span class="line">const map3 = new Map(map);</span><br></pre></td></tr></table></figure><p>方法：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1526114799767.png?raw=true" alt="1526114799767"></p><h3 id="3-8-模块化"><a href="#3-8-模块化" class="headerlink" title="3.8.模块化"></a>3.8.模块化</h3><h4 id="3-8-1-什么是模块化"><a href="#3-8-1-什么是模块化" class="headerlink" title="3.8.1.什么是模块化"></a>3.8.1.什么是模块化</h4><p>模块化就是把代码进行拆分，方便重复利用。类似java中的导包：要使用一个包，必须先导包。</p><p>而JS中没有包的概念，换来的是 模块。</p><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</p><ul><li><code>export</code>命令用于规定模块的对外接口，</li><li><code>import</code>命令用于导入其他模块提供的功能。</li></ul><h4 id="3-8-2-export"><a href="#3-8-2-export" class="headerlink" title="3.8.2.export"></a>3.8.2.export</h4><p>比如我定义一个js文件:hello.js，里面有一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">    sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我可以使用export将这个对象导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">    sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> util;</span><br></pre></td></tr></table></figure><p>当然，也可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> util = &#123;</span><br><span class="line">    sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>export</code>不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。</p><p>当要导出多个值时，还可以简写。比如我有一个文件：user.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"jack"</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span></span><br><span class="line"><span class="keyword">export</span> &#123;name,age&#125;</span><br></pre></td></tr></table></figure><blockquote><p>省略名称</p></blockquote><p>上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出变量名，否则就会出错。</p><p>因此js提供了<code>default</code>关键字，可以对导出的变量名进行省略</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无需声明对象的名字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">sum(a,b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当使用者导入时，可以任意起名字</p><h4 id="3-8-3-import"><a href="#3-8-3-import" class="headerlink" title="3.8.3.import"></a>3.8.3.import</h4><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p><p>例如我要使用上面导出的util：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入util</span></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'hello.js'</span></span><br><span class="line"><span class="comment">// 调用util中的属性</span></span><br><span class="line">util.sum(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>要批量导入前面导出的name和age： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'user.js'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">" , 今年"</span>+ age +<span class="string">"岁了"</span>)</span><br></pre></td></tr></table></figure><p>但是上面的代码暂时无法测试，因为浏览器目前还不支持ES6 的导入和导出功能。除非借助于工具，把ES6 的语法进行编译降级到ES5，比如<code>Babel-cli</code>工具</p><p> 我们暂时不做测试，大家了解即可。</p><h3 id="3-9-对象扩展"><a href="#3-9-对象扩展" class="headerlink" title="3.9.对象扩展"></a>3.9.对象扩展</h3><p>ES6给Object拓展了许多新的方法，如：</p><ul><li>keys(obj)：获取对象的所有key形成的数组</li><li>values(obj)：获取对象的所有value形成的数组</li><li>entries(obj)：获取对象的所有key和value形成的二维数组。格式：<code>[[k1,v1],[k2,v2],...]</code></li><li><p>assian(dest, …src) ：将多个src对象的值 拷贝到 dest中（浅拷贝）。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/ES6%E8%AF%AD%E6%B3%95%E6%8C%87%E5%8D%97/1527210872966.png?raw=true" alt="1527210872966"></p></li></ul><h3 id="3-10-数组扩展"><a href="#3-10-数组扩展" class="headerlink" title="3.10.数组扩展"></a>3.10.数组扩展</h3><p>ES6给数组新增了许多方法：</p><ul><li>find(callback)：把数组中的元素逐个传递给函数callback执行，如果返回true，则返回该元素</li><li>findIndex(callback)：与find类似，不过返回的是品牌到的元素的索引</li><li>includes（callback）：与find类似，如果匹配到元素，则返回true，代表找到了。</li></ul>]]></content>
    
    <summary type="html">
    
      ES6语法指南
    
    </summary>
    
      <category term="技术笔记" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://xiongtianci-tc.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>自定义百度云分享密码</title>
    <link href="http://xiongtianci-tc.github.io/2018/12/14/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/"/>
    <id>http://xiongtianci-tc.github.io/2018/12/14/自定义百度云分享密码/</id>
    <published>2018-12-14T01:13:35.000Z</published>
    <updated>2019-05-25T02:55:33.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>打开百度云盘网页版</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544750054257.png?raw=true" alt="1544750054257"></p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>找到需要分享的资源，点击分享之后看见下面内容：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544750254778.png?raw=true" alt="1544750254778"></p><p>别动，重点的在后面</p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>按下F12，进入开发者模式，点击 consle 进入控制台，如下图：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544750550143.png?raw=true" alt="1544750550143"></p><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>在控制台中输入下面代码，按下回车</p><blockquote><p>avascript:require([“function-widget-1:share/util/shareFriend/createLinkShare.js”]).prototype.makePrivatePassword=function(){return prompt(“请输入自定义的密码”,”1234”)}</p></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544750784118.png?raw=true" alt="1544750784118"></p><h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h1><p>关闭开发者模式，点击“创建链接”，输入你想要自定义的密码，回车确定即可</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544751090180.png?raw=true" alt="1544751090180"></p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544751100617.png?raw=true" alt="1544751100617"></p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544751152701.png?raw=true" alt="1544751152701"></p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BE%E5%BA%A6%E4%BA%91%E5%88%86%E4%BA%AB%E5%AF%86%E7%A0%81/1544751191191.png?raw=true" alt="1544751191191"></p>]]></content>
    
    <summary type="html">
    
      自定义百度云分享密码
    
    </summary>
    
      <category term="技术笔记" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="百度网盘" scheme="http://xiongtianci-tc.github.io/tags/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序笔记</title>
    <link href="http://xiongtianci-tc.github.io/2018/12/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://xiongtianci-tc.github.io/2018/12/11/微信小程序笔记/</id>
    <published>2018-12-11T13:15:58.000Z</published>
    <updated>2019-05-25T02:50:41.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序账号与工具"><a href="#微信小程序账号与工具" class="headerlink" title="微信小程序账号与工具"></a>微信小程序账号与工具</h1><p>在线文档：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/</a></p><h2 id="小程序开发者账号注册"><a href="#小程序开发者账号注册" class="headerlink" title="小程序开发者账号注册"></a>小程序开发者账号注册</h2><p>微信公众平台：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a></p><p>小程序开发者账号注册：<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a></p><h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><p>微信开发者工具：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html</a></p><h2 id="小程序在线Demo二维码"><a href="#小程序在线Demo二维码" class="headerlink" title="小程序在线Demo二维码"></a>小程序在线Demo二维码</h2><p>体验小程序官方源码：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/demo/demo.zip" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/demo/demo.zip</a></p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/weChatAppdemo.jpg?raw=true"></p><h1 id="微信小程序文件结构"><a href="#微信小程序文件结构" class="headerlink" title="微信小程序文件结构"></a>微信小程序文件结构</h1><h2 id="主体文件结构"><a href="#主体文件结构" class="headerlink" title="主体文件结构"></a>主体文件结构</h2><p>主体部分由三个文件组成，必须放在项目的根目录，如下：</p><table><thead><tr><th>文件</th><th>必填</th><th>作用</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/app.html" target="_blank" rel="noopener">app.js</a></td><td>是</td><td>小程序逻辑</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="noopener">app.json</a></td><td>是</td><td>小程序公共设置</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html" target="_blank" rel="noopener">app.wxss</a></td><td>否</td><td>小程序公共样式表</td></tr></tbody></table><h2 id="页面文件结构"><a href="#页面文件结构" class="headerlink" title="页面文件结构"></a>页面文件结构</h2><p>页面由四个文件组成，分别是：</p><table><thead><tr><th>文件类型</th><th>必填</th><th>作用</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/page.html" target="_blank" rel="noopener">js</a></td><td>是</td><td>页面逻辑 ( 微信小程序没有window和document对象 )</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/" target="_blank" rel="noopener">wxml</a></td><td>是</td><td>页面结构  ( XML语法，不是HTML语法 )</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html" target="_blank" rel="noopener">wxss</a></td><td>否</td><td>页面样式表 ( <strong>拓展了rpx尺寸单位，微信专属响应式像素</strong> )</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#pagejson" target="_blank" rel="noopener">json</a></td><td>否</td><td>页面配置  ( 不能写注释，否则编译报错 )</td></tr></tbody></table><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/fileTree.png?raw=true"></p><h1 id="WXML-结构-基础-标签、组件"><a href="#WXML-结构-基础-标签、组件" class="headerlink" title="WXML 结构_基础 (标签、组件)"></a>WXML 结构_基础 (标签、组件)</h1><p>组件文档：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/component/</a></p><h2 id="常用布局标签-组件"><a href="#常用布局标签-组件" class="headerlink" title="常用布局标签(组件)"></a>常用布局标签(组件)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span>相当于    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span>相当于    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span>相当于    <span class="tag">&lt;<span class="name">img</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span>&gt;</span><span class="tag">&lt;/<span class="name">navigator</span>&gt;</span>相当于    <span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span>&gt;</span><span class="tag">&lt;/<span class="name">block</span>&gt;</span>区块标签，不会渲染到页面</span><br></pre></td></tr></table></figure><p><strong>注意：image组件默认宽度300px、高度225px，很多时候我们都不需要这个默认宽高，记得手动设置宽高</strong></p><h2 id="常用表单标签-组件"><a href="#常用表单标签-组件" class="headerlink" title="常用表单标签(组件)"></a>常用表单标签(组件)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">radio</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="轮播图组件"><a href="#轮播图组件" class="headerlink" title="轮播图组件"></a>轮播图组件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">"是否显示面板指示点"</span> <span class="attr">autoplay</span>=<span class="string">"是否自动切换"</span> <span class="attr">interval</span>=<span class="string">"自动切换时间间隔"</span> <span class="attr">duration</span>=<span class="string">"滑动动画时长"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"图片路径1"</span> <span class="attr">width</span>=<span class="string">"375"</span> <span class="attr">height</span>=<span class="string">"150"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"图片路径2"</span> <span class="attr">width</span>=<span class="string">"375"</span> <span class="attr">height</span>=<span class="string">"150"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>探索：实现无缝轮播怎么办？</p><h1 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h1><p>WXSS (WeiXin Style Sheets) 是一套样式语言。</p><p>WXSS文档： <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxss.html</a></p><h2 id="WXSS-新增特性"><a href="#WXSS-新增特性" class="headerlink" title="WXSS 新增特性"></a>WXSS 新增特性</h2><p>与 CSS 相比，WXSS 扩展以下2个特性：</p><ul><li>尺寸单位      rpx ( responsive pixel 响应式像素) </li><li>样式导入      @import  “样式表路径”;</li></ul><h2 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h2><ul><li>rpx  ( responsive pixel 响应式像素) : 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</li><li><strong>建议：</strong> 开发微信小程序时设计师可以用 <code>iPhone6</code> 作为视觉稿的标准。</li></ul><h1 id="JSON-配置"><a href="#JSON-配置" class="headerlink" title="JSON 配置"></a>JSON 配置</h1><p>配置文档：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html</a></p><h2 id="app-json-配置项列表"><a href="#app-json-配置项列表" class="headerlink" title="app.json 配置项列表"></a>app.json 配置项列表</h2><blockquote><p><code>app.json</code> 文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#pages" target="_blank" rel="noopener">pages</a></td><td>String Array</td><td>是</td><td>设置页面路径</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#window" target="_blank" rel="noopener">window</a></td><td>Object</td><td>否</td><td>设置默认页面的窗口表现</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#tabbar" target="_blank" rel="noopener">tabBar</a></td><td>Object</td><td>否</td><td>设置底部 tab 的表现</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#networktimeout" target="_blank" rel="noopener">networkTimeout</a></td><td>Object</td><td>否</td><td>设置网络超时时间</td></tr><tr><td><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#debug" target="_blank" rel="noopener">debug</a></td><td>Boolean</td><td>否</td><td>设置是否开启 debug 模式</td></tr></tbody></table></blockquote><p>如：<code>app.json</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"window"</span>: &#123;</span><br><span class="line">    <span class="string">"navigationBarTitleText"</span>: <span class="string">"小程序标题"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="string">"list"</span>: [&#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"首页"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"Tab栏"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"networkTimeout"</span>: &#123;</span><br><span class="line">    <span class="string">"request"</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="string">"downloadFile"</span>: <span class="number">10000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"debug"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="window-配置"><a href="#window-配置" class="headerlink" title="window 配置"></a><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#window" target="_blank" rel="noopener">window</a> 配置</h2><blockquote><p>用于设置小程序的状态栏、导航条、标题、窗口背景色。</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色，如”#000000”</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉背景字体、loading 图的样式，仅支持 dark/light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/page.html#页面相关事件处理函数" target="_blank" rel="noopener">页面相关事件处理函数</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为px</td></tr></tbody></table><h3 id="window-配置图示"><a href="#window-配置图示" class="headerlink" title="window 配置图示"></a>window 配置图示</h3><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/config.jpg?raw=true"></p><h3 id="window-配置注意事项"><a href="#window-配置注意事项" class="headerlink" title="window 配置注意事项"></a>window 配置注意事项</h3><blockquote><p>!! 注意：页面的<code>.json</code>只能设置 <code>window</code> 相关的配置项，以决定本页面的窗口表现，所以无需写 <code>window</code> 这个关键词。</p></blockquote><p>如：/pages/message/message.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">    <span class="string">"navigationBarTextStyle"</span>: <span class="string">"black"</span>,</span><br><span class="line">    <span class="string">"navigationBarTitleText"</span>: <span class="string">"内页标题修改"</span>,</span><br><span class="line">    <span class="string">"backgroundColor"</span>: <span class="string">"#eeeeee"</span>,</span><br><span class="line">    <span class="string">"backgroundTextStyle"</span>: <span class="string">"light"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tabBar-配置"><a href="#tabBar-配置" class="headerlink" title="tabBar 配置"></a><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html#tabbar" target="_blank" rel="noopener">tabBar</a> 配置</h2><p>如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar上边框的颜色， 仅支持 black/white</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top，设置成top是无图标</td></tr></tbody></table><p>其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><h3 id="tabBar-配置图示"><a href="#tabBar-配置图示" class="headerlink" title="tabBar 配置图示"></a>tabBar 配置图示</h3><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/tabBar.png?raw=true"></p><h3 id="tabBar-配置注意事项"><a href="#tabBar-配置注意事项" class="headerlink" title="tabBar 配置注意事项"></a>tabBar 配置注意事项</h3><blockquote><ol><li>当设置 position 为 top 时，将不会显示 icon。</li><li>tabBar 中的 list 是一个数组，<strong>只能配置最少2个、最多5个 tab</strong>，tab 按数组的顺序排序。</li><li>icon 大小限制为40kb，建议尺寸为 81px * 81px。</li></ol></blockquote><h1 id="JS-行为-逻辑"><a href="#JS-行为-逻辑" class="headerlink" title="JS 行为(逻辑)"></a>JS 行为(逻辑)</h1><h2 id="微信小程序生命周期函数"><a href="#微信小程序生命周期函数" class="headerlink" title="微信小程序生命周期函数"></a>微信小程序生命周期函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">/** 页面的初始数据 */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 生命周期函数--监听页面加载 */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(options);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 生命周期函数--监听页面初次渲染完成 */</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 生命周期函数--监听页面显示 */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 生命周期函数--监听页面隐藏 */</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 生命周期函数--监听页面卸载 */</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="页面相关事件处理函数"><a href="#页面相关事件处理函数" class="headerlink" title="页面相关事件处理函数"></a>页面相关事件处理函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 页面相关事件处理函数--监听用户下拉动作 */</span></span><br><span class="line"> onPullDownRefresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">/** 页面上拉触底事件的处理函数 */</span></span><br><span class="line"> onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">/** 用户点击右上角分享 */</span></span><br><span class="line"> onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>微信小程序没有BOM和DOM概念，所以不能使用window对象和document对象。</p></blockquote><h1 id="WXML-高级-指令、事件"><a href="#WXML-高级-指令、事件" class="headerlink" title="WXML  高级(指令、事件)"></a>WXML  高级(指令、事件)</h1><h2 id="数据绑定-123-123-125-125"><a href="#数据绑定-123-123-125-125" class="headerlink" title="数据绑定  &#123;&#123; &#125;&#125;"></a><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/data.html" target="_blank" rel="noopener">数据绑定</a>  &#123;&#123; &#125;&#125;</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;message&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello MINA!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><ol><li><strong>花括号和引号之间不能有空格。</strong></li><li><strong>不要直接写 checked=”false”，其计算结果是一个字符串，转成 boolean 类型后代表真值。</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">"false"</span>&gt;</span> <span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span>其计算结果是一个字符串，转成 boolean 类型后变成了 true</span><br><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;false&#125;&#125;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span>正确写法</span><br></pre></td></tr></table></figure><h2 id="列表渲染-wx-for"><a href="#列表渲染-wx-for" class="headerlink" title="列表渲染  wx:for"></a><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html" target="_blank" rel="noopener">列表渲染</a>  wx:for</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="wx-key"><a href="#wx-key" class="headerlink" title="wx:key"></a>wx:key</h3><p>主要功能：提高列表渲染时排序的效率。</p><p><code>wx:key</code> 的值以两种形式提供：</p><ol><li>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li><li>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。</li></ol><blockquote><p>如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</p></blockquote><h2 id="条件渲染-wx-if-wx-else-wx-elif"><a href="#条件渲染-wx-if-wx-else-wx-elif" class="headerlink" title="条件渲染  wx:if   wx:else   wx:elif"></a><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/conditional.html" target="_blank" rel="noopener">条件渲染</a>  wx:if   wx:else   wx:elif</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;length &gt;= 80&#125;&#125;"</span>&gt;</span> 优秀 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;length &gt;= 60&#125;&#125;"</span>&gt;</span> 良好 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> 加油 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    length: <span class="string">'95'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="wx-if-与-hidden-区别"><a href="#wx-if-与-hidden-区别" class="headerlink" title="wx:if 与 hidden 区别"></a><code>wx:if</code> 与 <code>hidden</code> 区别</h3><p> <code>wx:if</code>  是否渲染， <code>hidden</code>  是否隐藏。</p><p>一般来说，<code>wx:if</code> 有更高的切换消耗而 <code>hidden</code> 有更高的初始渲染消耗。</p><p>因此，如果需要频繁切换的情景下，用 <code>hidden</code> 更好。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">事件</a></h2><ul><li>事件对象可以获取额外信息，如 id, dataset(自定义属性集合), touches(触摸点坐标)。</li></ul><h3 id="事件绑定和冒泡"><a href="#事件绑定和冒泡" class="headerlink" title="事件绑定和冒泡"></a>事件绑定和冒泡</h3><ol><li>冒泡事件    bind事件类型        如     <code>bindtap</code>   <code>bindlongpress</code></li><li>非冒泡事件    catch事件类型    如  <code>catchtap</code>   <code>catchlongpress</code></li></ol><h3 id="常用事件类型"><a href="#常用事件类型" class="headerlink" title="常用事件类型"></a>常用事件类型</h3><table><thead><tr><th>类型</th><th>触发条件</th></tr></thead><tbody><tr><td>tap</td><td>手指触摸后马上离开</td></tr><tr><td>longpress</td><td>手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-index</span>=<span class="string">"自定义属性"</span> <span class="attr">bindtap</span>=<span class="string">"tapHandle"</span>&gt;</span> 点我触发事件 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  tapHandle: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="事件传参注意"><a href="#事件传参注意" class="headerlink" title="事件传参注意"></a>事件传参注意</h3><p>小程序绑定事件只能写函数名称，不能通过括号方式传参。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"tapHandle(520)"</span>&gt;</span> 点我触发事件 <span class="tag">&lt;/<span class="name">view</span>&gt;</span>错误，事件不能触发</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-index</span>=<span class="string">"520"</span> <span class="attr">bindtap</span>=<span class="string">"tapHandle"</span>&gt;</span> 点我触发事件 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  tapHandle: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log( event.target.dataset.index );  <span class="comment">// 输出标签自定义属性上的index值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="WXS-脚本"><a href="#WXS-脚本" class="headerlink" title="WXS  脚本"></a>WXS  脚本</h2><p>WXS（WeiXin Script）是小程序的一套脚本语言，结合 <code>WXML</code>，功能类似<code>&lt;script&gt;</code>标签，主要用于在视图层定义函数(比较少用)。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>wxs 不依赖于运行时的基础库版本，可以在所有版本的小程序中运行。</li><li>wxs 与 javascript 是不同的语言，有自己的语法，并不和 javascript 一致。</li><li>wxs 的运行环境和其他 javascript 代码是隔离的，wxs 中不能调用其他 javascript 文件中定义的函数，也不能调用小程序提供的API。</li><li>wxs 函数不能作为组件的事件回调。</li><li>由于运行环境的差异，在 iOS 设备上小程序内的 wxs 会比 javascript 代码快 2 ~ 20 倍。在 android 设备上二者运行效率无差异。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">"foo"</span>&gt;</span></span><br><span class="line">var sum = function(a,b)&#123;</span><br><span class="line">  return a+b;</span><br><span class="line">&#125;;</span><br><span class="line">// 这里可以导出一个对象，这个对象可以直接在界面上使用 </span><br><span class="line">module.exports.sum = sum;</span><br><span class="line"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;foo.sum(1,2)&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="微信开发者工具常用快捷键"><a href="#微信开发者工具常用快捷键" class="headerlink" title="微信开发者工具常用快捷键"></a>微信开发者工具常用快捷键</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Shift + Alt + F</td><td>格式化代码</td></tr><tr><td>Ctrl + P</td><td>跳到文件</td></tr><tr><td>Ctrl + E</td><td>跳到最近文件</td></tr><tr><td>Ctrl + Shift + P</td><td>上传扫码预览</td></tr><tr><td>Ctrl + Shift + I</td><td>显示/隐藏调试器</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      小程序基础
    
    </summary>
    
      <category term="小程序" scheme="http://xiongtianci-tc.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://xiongtianci-tc.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix状态</title>
    <link href="http://xiongtianci-tc.github.io/2018/12/07/Hystrix%E7%8A%B6%E6%80%81/"/>
    <id>http://xiongtianci-tc.github.io/2018/12/07/Hystrix状态/</id>
    <published>2018-12-07T00:12:05.000Z</published>
    <updated>2019-05-25T02:59:28.640Z</updated>
    
    <content type="html"><![CDATA[<p>@SpringCloudApplication 相当于：@EnableCircuitBreaker、@EnableDiscoveryClilent、@SpringBootApplication</p><h3 id="熔断器状态的相关配置"><a href="#熔断器状态的相关配置" class="headerlink" title="熔断器状态的相关配置"></a>熔断器状态的相关配置</h3><p>@HystrixProperty相关配置在抽象类：package com.netflix.hystrix.HystrixCommandProperties 中</p><p><strong>熔断器开启或者关闭的条件：</strong></p><p>1、  当满足一定的阀值的时候（默认10秒内超过20个请求次数）</p><p>2、  当失败率达到一定的时候（默认10秒内超过50%的请求失败）</p><p>3、  到达以上阀值，断路器将会开启</p><p>4、  当开启的时候，所有请求都不会进行转发</p><p>5、  一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启服务降级</span></span><br><span class="line"><span class="meta">@HystrixCommand</span>(</span><br><span class="line">        <span class="comment">// 熔断器状态相关配置</span></span><br><span class="line">        commandProperties = &#123;</span><br><span class="line">                <span class="comment">// 当请求次数达到10次时才能开启熔断</span></span><br><span class="line">                <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="string">"10"</span>),</span><br><span class="line">                <span class="comment">// 状态变换的时间，由开启 --&gt; 半开</span></span><br><span class="line">                <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="string">"20000"</span>),</span><br><span class="line">                <span class="comment">// 失败请求/所有请求=60% --&gt; 开启熔断器</span></span><br><span class="line">                <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="string">"60"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Hystrix状态
    
    </summary>
    
      <category term="后台开发" scheme="http://xiongtianci-tc.github.io/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SpringCloud" scheme="http://xiongtianci-tc.github.io/tags/SpringCloud/"/>
    
      <category term="Hystrix" scheme="http://xiongtianci-tc.github.io/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>HashSet如何去重?</title>
    <link href="http://xiongtianci-tc.github.io/2018/12/06/HashSet%E5%A6%82%E4%BD%95%E5%8E%BB%E9%87%8D/"/>
    <id>http://xiongtianci-tc.github.io/2018/12/06/HashSet如何去重/</id>
    <published>2018-12-06T02:37:51.000Z</published>
    <updated>2019-05-25T02:56:26.666Z</updated>
    
    <content type="html"><![CDATA[<p>&lt; !– more –&gt;<br>HashSet存储元素的原理：<br>往hashSet添加元素的时候，首先会调用元素的 <code>hashCode</code> 方法得到元素的哈希码值，然后把哈希码值经过运算算出该元素存在哈希表中的位置。有两种情况：</p><ul><li><p>情况1：如果算出的位置目前还没有存在任何的元素，那么该元素可以直接添加到哈希表中。</p></li><li><p>情况2： 如果算出的位置目前已经存在其他的元素，那么还会调用元素的 <code>equals</code> 方法再与这个位置上的元素比较一次。<br>如果 <code>equals</code> 方法返回的是true，那么该元素被视为重复元素，不允许添加。如果equals方法返回的是false，那么该元素也可以被添加。  </p></li></ul><h2 id="先看个最简单的构造方法"><a href="#先看个最简单的构造方法" class="headerlink" title="先看个最简单的构造方法"></a>先看个最简单的构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span><br><span class="line">* <span class="function"><span class="keyword">default</span> initial <span class="title">capacity</span> <span class="params">(<span class="number">16</span>)</span> and load <span class="title">factor</span> <span class="params">(<span class="number">0.75</span>)</span>.</span></span><br><span class="line"><span class="function">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，HashSet底层是Hashmap存储的。借大神的话</p><blockquote><p>HashSet 就是HashMap的马甲       —–someone</p></blockquote><h2 id="再看看add方法"><a href="#再看看add方法" class="headerlink" title="再看看add方法"></a>再看看add方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds the specified element to this set if it is not already present.</span></span><br><span class="line"><span class="comment">     * More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span></span><br><span class="line"><span class="comment">     * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     * If this set already contains the element, the call leaves the set</span></span><br><span class="line"><span class="comment">     * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be added to this set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span></span><br><span class="line"><span class="comment">     * element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>add方法的参数：</p><ul><li>map：map是一个HashMap的实例</li><li>e：我们要存储的值，是HashMap的key</li><li>PRESENT：固定值( Object PRESENT = new Object(); )，空的obj对象</li></ul><p>Set偷偷的用了HashMap的 <code>put</code> 方法，然而HashMap并没有去重的功能呀，那么Set是如何做到去重的呢？</p><p>从add方法中可以看到，E是我们要存储的值，而到了HashMap里面却变成了Key，PRESENT就是个空对象。</p><p>在HashMap中Key的HashCode是决定底层数组的下标，进一步使用 <code>equals</code> 进行遍历对象链表中的<strong>Key</strong>进而覆盖原来的Value。</p><p>那么对于HashSet，如果 <code>e</code> 已经存在（先HashCode相同定位到链表，然后equals比较定位到具体的Node），那么覆盖oldValue（value其实就是个傀儡，没啥用），Key不变；如果不存在，就添加一个新的节点（即加了一个新的Key）。</p><p>HashMap的返回值是oldValue，oldValue==null说明节点之前不存在；反之说明节点存在，虽然返回false但实际上还是对底层数据进行了改变（即旧的空对象变成了新的空对象）。</p><p>总而言之，HashSet确定相同的方式其实就是HashCode相同（才能找到同一链表），然后equals的返回值（才能比较具体节点进行覆盖）。</p><h2 id="重点看key（敲黑板）"><a href="#重点看key（敲黑板）" class="headerlink" title="重点看key（敲黑板）"></a>重点看key（敲黑板）</h2><p>HashMap中的put方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>这里边有两个看点：</strong></p><ul><li>HashMap中key存储是hash后的值，对于String类型的相同值的hash值是一致的（其他接触类型类似，自定义对象类型需要重写hashcode方法与equel方法）。换句话说相同的值在hashMap中的存储位置是一样的。</li><li>基于上一点来看看怎么存储重复值的。如下代码对于hashMap中已经存在的key，key不变，新value覆盖就value。对于HashSet而言新旧value都是PRESENT对象，所以set在存储的时候就不会重复。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">V oldValue = e.value;</span><br><span class="line"><span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">e.value = value;</span><br><span class="line">afterNodeAccess(e);</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以hashset中存储的值输出的顺序和存储的先后顺序不一致，这是因为hashset是按照值的hash顺序进行输出。</p>]]></content>
    
    <summary type="html">
    
      HeshSet如何去重
    
    </summary>
    
      <category term="后台开发" scheme="http://xiongtianci-tc.github.io/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HashSet" scheme="http://xiongtianci-tc.github.io/tags/HashSet/"/>
    
      <category term="面试题" scheme="http://xiongtianci-tc.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>IDEA常用快捷键</title>
    <link href="http://xiongtianci-tc.github.io/2018/12/04/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://xiongtianci-tc.github.io/2018/12/04/IDEA常用快捷键/</id>
    <published>2018-12-04T07:45:52.000Z</published>
    <updated>2019-05-25T02:58:30.218Z</updated>
    
    <content type="html"><![CDATA[<p><code>Ctrl+Alt+D</code> –&gt; 查看当前类的实现类</p><p>ctrl+l –&gt; 重写方法</p>]]></content>
    
    <summary type="html">
    
      IDEA常用快捷键
    
    </summary>
    
      <category term="技术笔记" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="IDEA" scheme="http://xiongtianci-tc.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>IDEA创建SpringBoot开启找回RunDashboard</title>
    <link href="http://xiongtianci-tc.github.io/2018/12/04/IDEA%E5%88%9B%E5%BB%BASpringBoot%E5%BC%80%E5%90%AF%E6%89%BE%E5%9B%9ERunDashboard/"/>
    <id>http://xiongtianci-tc.github.io/2018/12/04/IDEA创建SpringBoot开启找回RunDashboard/</id>
    <published>2018-12-04T06:32:05.000Z</published>
    <updated>2019-05-25T03:04:24.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Run-Dashboard-面板"><a href="#Run-Dashboard-面板" class="headerlink" title="Run Dashboard 面板"></a>Run Dashboard 面板</h1><p><strong>Run Dashboard</strong>：微服务项目的开发过程中，工程会非常多，经常要启动很多个服务，才能完成一项测试。启动的多了，容易给开发者带来错乱的感觉，很不方便管理。IDEA开发工具推荐了一个很好用的功能–Run Dashboard。他是 Run 的升级版</p><p>我们可以对比一下这个是Run Dashboard的窗口</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/IDEA%E5%88%9B%E5%BB%BASpringBoot%E5%BC%80%E5%90%AF%E6%89%BE%E5%9B%9ERunDashboard/1543905902634.png?raw=true" alt="1543905902634"> </p><p>普通的Run窗口：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/IDEA%E5%88%9B%E5%BB%BASpringBoot%E5%BC%80%E5%90%AF%E6%89%BE%E5%9B%9ERunDashboard/1543905965611.png?raw=true" alt="1543905965611"> </p><p>显然如果启动多个端口Run Dashboard窗口显得更好管理。<br>一般有时候创建springboot项目的时候右下角可以提示你打开Run Dashboard，但是如果不提醒就需要自己配置了。</p><h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>新建项目或者通过 <code>open</code> 打开项目时，可能会弹出提示 “Multiple Spring Boot run configurations were detected. Run Dashboard allows to manage multiple run configurations at once.” 见下图：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/IDEA%E5%88%9B%E5%BB%BASpringBoot%E5%BC%80%E5%90%AF%E6%89%BE%E5%9B%9ERunDashboard/1543906387601.png?raw=true" alt="1543906387601"> </p><p>点击 <code>Show run configurations in Run Dashboard</code> ，<code>Run Dashboard</code> 面板重新在底部区域展示了出来。</p><p>如没有此提示，请选择方式二或方式三</p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>打开Run Dashboard：View –&gt; Tool Windows –&gt; Run Dashboard</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/IDEA%E5%88%9B%E5%BB%BASpringBoot%E5%BC%80%E5%90%AF%E6%89%BE%E5%9B%9ERunDashboard/1543906576903.png?raw=true" alt="1543906576903"></p><h2 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h2><p>如果上述的方式都没有打开 <code>Run Dashboard</code> 面板，可以在工程目录下找 <code>.idea</code> 文件夹下的 <code>workspace.xml</code>文件，通过修改此文件可达到打开 <code>Run Dashboard</code> 面板的目的</p><ol><li><p>找到当前项目中 <code>.idea</code> 文件下的 <code>workspace.xml</code> 文件，双击打开<br><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/IDEA%E5%88%9B%E5%BB%BASpringBoot%E5%BC%80%E5%90%AF%E6%89%BE%E5%9B%9ERunDashboard/1543906852844.png?raw=true" alt="1543906852844"> </p></li><li><p>接下来找到 <code>&lt;component name=&quot;RunDashboard&quot;&gt;</code><br><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/IDEA%E5%88%9B%E5%BB%BASpringBoot%E5%BC%80%E5%90%AF%E6%89%BE%E5%9B%9ERunDashboard/1543907062997.png?raw=true" alt="1543907062997"> </p></li><li><p>加入如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"configurationTypes"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"SpringBootApplicationConfigurationType"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样 <code>Run Dashboard</code> 自动就弹出来了</p><p>最终配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"RunDashboard"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"configurationTypes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"SpringBootApplicationConfigurationType"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ruleStates"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RuleState</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"ConfigurationTypeDashboardGroupingRule"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">RuleState</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RuleState</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"StatusDashboardGroupingRule"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">RuleState</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      IDEA
    
    </summary>
    
      <category term="技术笔记" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="IDEA" scheme="http://xiongtianci-tc.github.io/tags/IDEA/"/>
    
      <category term="工具" scheme="http://xiongtianci-tc.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础-基本语法</title>
    <link href="http://xiongtianci-tc.github.io/2018/11/30/Vue%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://xiongtianci-tc.github.io/2018/11/30/Vue基础-基本语法/</id>
    <published>2018-11-30T09:37:11.000Z</published>
    <updated>2019-05-25T02:52:46.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是Vue-js"><a href="#1-什么是Vue-js" class="headerlink" title="1. 什么是Vue.js"></a>1. 什么是Vue.js</h1><ul><li>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</li><li>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</li><li>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</li><li>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</li></ul><h1 id="2-安装-Vue"><a href="#2-安装-Vue" class="headerlink" title="2. 安装 Vue"></a>2. 安装 Vue</h1><h2 id="2-1-下载安装"><a href="#2-1-下载安装" class="headerlink" title="2.1 下载安装"></a>2.1 下载安装</h2><p>下载地址：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a></p><p>可以下载2.5.16版本<a href="https://github.com/vuejs/vue/archive/v2.5.16.zip" target="_blank" rel="noopener">https://github.com/vuejs/vue/archive/v2.5.16.zip</a></p><p>下载解压，得到vue.js文件</p><h2 id="2-2-使用CDN"><a href="#2-2-使用CDN" class="headerlink" title="2.2 使用CDN"></a>2.2 使用CDN</h2><p>或者也可以直接使用公共的CDN服务：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了用帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-框架和库的区别"><a href="#3-框架和库的区别" class="headerlink" title="3. 框架和库的区别"></a>3. 框架和库的区别</h1><ul><li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。<ul><li>node 中的 express；</li></ul></li><li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。<ul><li>从Jquery 切换到 Zepto</li><li>从 EJS 切换到 art-template</li></ul></li></ul><h1 id="4-Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别（了解内容）"><a href="#4-Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别（了解内容）" class="headerlink" title="4. Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别（了解内容）"></a>4. Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别（了解内容）</h1><ul><li>MVC 主要是后端的分层开发思想；把 一个完整的后端项目，分成了三个部分：<ul><li>Model：（数据层）主要负责 数据库的操作；</li><li>View：（视图层）所有前端页面，统称为 View 层</li><li>Controller：（业务逻辑层）主要处理对应的业务逻辑；（对于后台来说，这是开发的重点）</li></ul></li><li>MVVM是<strong>前端页面的分层开发思想</strong>，主要关注于 <strong>视图层</strong> 分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View,  ViewModel<ul><li>Model 是 页面中，需要用到的数据</li><li>View 是页面中的HTML结构；</li><li>ViewModel 是 一个 中间的调度者,提供了双向数据绑定的概念；</li></ul></li><li>为什么有了MVC还要有MVVM<ul><li>因为 MVC是后端的开发思想，并没有明确定义前端的页面该如何开发；</li><li>MVVM 是前端的页面的开发思想，把每个页面，分成了三个部分，同时 VM 作为 MVVM 的核心，提供了双向数据绑定的概念，前端程序员，不需要手动渲染页面了，而且，页面数据发送变化，也不需要程序员手动把 数据的变化同步到Model中；这所有的操作，都是 VM 自动完成的！</li><li>有了 MVVM 的思想以后，前端只关心 页面交互逻辑，不关心页面如何渲染；</li></ul></li></ul><h2 id="4-2-Vue-js-基本代码-和-MVVM-之间的对应关系"><a href="#4-2-Vue-js-基本代码-和-MVVM-之间的对应关系" class="headerlink" title="4.2 Vue.js 基本代码 和 MVVM 之间的对应关系"></a>4.2 Vue.js 基本代码 和 MVVM 之间的对应关系</h2><ol><li>注意：Vue中，不推荐程序员手动操作DOM元素；所以，在Vue项目中，没有极其变态的需求，一般不要引入 Jquery；</li><li>Vue代码解析执行的步骤：<ol><li>当 VM 实例对象，被 创建完成之后，会立即解析 el 指定区域中的所有代码；</li><li>当 VM 在解析 el 区域中所有代码的时候，会把 data 中的数据，按需，填充到 页面指定的区域；</li></ol></li><li>注意：每当 vm 实例对象，监听到 data 中数据发生了变化，就会立即 重新解析 执行 el 区域内，所有的代码；</li></ol><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Vue%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/1540830117063.png?raw=true" alt="1540830117063"></p><p>mvvm是前端思想，mvc是后台思想</p><h1 id="5-Vue调试工具vue-devtools的安装和使用"><a href="#5-Vue调试工具vue-devtools的安装和使用" class="headerlink" title="5. Vue调试工具vue-devtools的安装和使用"></a>5. Vue调试工具<code>vue-devtools</code>的安装和使用</h1><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h1 id="6-快速入门"><a href="#6-快速入门" class="headerlink" title="6. 快速入门"></a>6. 快速入门</h1><h1 id="7-Vue实例"><a href="#7-Vue实例" class="headerlink" title="7. Vue实例"></a>7. Vue实例</h1><h2 id="7-1-创建Vue实例"><a href="#7-1-创建Vue实例" class="headerlink" title="7.1 创建Vue实例"></a>7.1 创建Vue实例</h2><p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在构造函数中传入一个对象，并且在对象中声明各种Vue需要的数据和方法，包括：</p><ul><li>el</li><li>data</li><li>methods</li></ul><p>等等</p><p>接下来我们一 一介绍。</p><h2 id="7-2-模板或元素"><a href="#7-2-模板或元素" class="headerlink" title="7.2 模板或元素"></a>7.2 模板或元素</h2><p>每个Vue实例都需要关联一段Html模板，Vue会基于此模板进行视图渲染。</p><p>我们可以通过el属性来指定。</p><p>例如一段html模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后创建Vue实例，关联这个div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样，Vue就可以基于id为<code>app</code>的div元素作为模板进行渲染了。在这个div范围以外的部分是无法使用vue特性的。</p><h2 id="7-3-数据"><a href="#7-3-数据" class="headerlink" title="7.3 数据"></a>7.3 数据</h2><p>当Vue实例被创建时，它会尝试获取在data中定义的所有属性，用于视图的渲染，并且监视data中的属性变化，当data发生改变，所有相关的视图都将重新渲染，这就是“响应式“系统。</p><p>html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:<span class="string">"刘德华"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>name的变化会影响到<code>input</code>的值</li><li>input中输入的值，也会导致vm中的name发生改变</li></ul><h2 id="7-4-方法"><a href="#7-4-方法" class="headerlink" title="7.4 方法"></a>7.4 方法</h2><p>Vue实例中除了可以定义data属性，也可以定义方法，并且在Vue的作用范围内使用。</p><p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js写法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"add"</span>&gt;加&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"vue-2.5.17.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el:<span class="string">"#app"</span>,</span><br><span class="line">       data:&#123;</span><br><span class="line">           num:<span class="number">0</span></span><br><span class="line">       &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">this</span>.num++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>js写法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line">    &lt;button v-on:click=<span class="string">"add"</span>&gt;加&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"vue-2.5.17.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el:<span class="string">"#app"</span>,</span><br><span class="line">       data:&#123;</span><br><span class="line">           num:<span class="number">0</span></span><br><span class="line">       &#125;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           add()&#123;</span><br><span class="line">               <span class="keyword">this</span>.num++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-5-生命周期"><a href="#7-5-生命周期" class="headerlink" title="7.5 生命周期"></a>7.5 生命周期</h2><h3 id="7-5-1-生命周期"><a href="#7-5-1-生命周期" class="headerlink" title="7.5.1 生命周期"></a>7.5.1 生命周期</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 ：创建实例，装载模板，渲染模板等等。Vue为生命周期中的每个状态都设置了钩子函数（监听函数）。每当Vue实例处于不同的生命周期时，对应的函数就会被触发调用。</p><p>生命周期：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Vue%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/lifecycle.png?raw=true" alt="Vue life cycle"></p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Vue%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/1540850010193.png?raw=true" alt="1540850010193"></p><h3 id="7-5-2-钩子函数"><a href="#7-5-2-钩子函数" class="headerlink" title="7.5.2 钩子函数"></a>7.5.2 钩子函数</h3><p><strong>钩子函数</strong>：生命周期函数的别名；</p><ul><li>生命周期钩子 = 生命周期函数 = 生命周期事件</li><li>主要的生命周期函数分类：<ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li><strong>created</strong>：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板【当 vm 实例的 data 和 methods 初始化完毕后，vm 实例会自动执行 created 函数】</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li><strong>mounted</strong>：此时，已经将编译好的模板，挂载到了页面指定的容器中显示【如果要通过某些插件操作页面上的DOM元素节点，最早要在 mounted 中进行】</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><ul><li>例1：created代表在vue实例创建后；</li></ul><p>我们可以在Vue中定义一个created函数，代表这个时期的构造函数：</p><p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;hello&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"vue-2.5.17.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el:<span class="string">"#app"</span>,</span><br><span class="line">       data:&#123;</span><br><span class="line">           hello:<span class="string">''</span></span><br><span class="line">       &#125;,</span><br><span class="line">       created()&#123;</span><br><span class="line">           <span class="keyword">this</span>.hello = <span class="string">'czdx,一统江湖，千秋万代'</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Vue%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/1540845983254.png?raw=true" alt="1540845983254"></p><ul><li>例2：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>vuejs生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vuejs-2.5.17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         &#123;&#123;message&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">         el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">         data: &#123;</span></span><br><span class="line"><span class="javascript">            message: <span class="string">'hello world'</span></span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         beforeCreate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'创建vue实例前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'创建vue实例后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         beforeMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'挂载到dom前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'挂载到dom后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         beforeUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'数据变化更新前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         updated: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'数据变化更新后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'vue实例销毁前'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;,</span></span><br><span class="line"><span class="javascript">         destroyed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showData(<span class="string">'vue实例销毁后'</span>, <span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">realDom</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'真实dom结构：'</span> + <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerHTML);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">showData</span>(<span class="params">process, obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(process);</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'data 数据：'</span> + obj.message)</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'挂载的对象：'</span>)</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(obj.$el)</span></span><br><span class="line"><span class="undefined">         realDom();</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'------------------'</span>)</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(<span class="string">'------------------'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      vm.message = <span class="string">"good..."</span>;</span></span><br><span class="line"><span class="undefined">      vm.$destroy();</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-5-3-this"><a href="#7-5-3-this" class="headerlink" title="7.5.3 this"></a>7.5.3 this</h3><p>我们可以看下在vue内部的this变量是谁，我们在created的时候，打印this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        hello: <span class="string">''</span> <span class="comment">// hello初始化为空</span></span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        <span class="keyword">this</span>.hello = <span class="string">"czdx,一统江湖，千秋万代"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 控制台的输出：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Vue%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/1540846042618.png?raw=true" alt="1540846042618"></p><h1 id="8-指令"><a href="#8-指令" class="headerlink" title="8. 指令"></a>8. 指令</h1><p><strong>指令</strong> (Directives)： 是带有 <code>v-</code> 前缀的特殊特性。指令特性的预期值是：<strong>单个 JavaScript 表达式</strong>。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。 </p><p>例如我们在入门案例中的v-on，代表绑定事件。</p><h2 id="8-1-插值表达式"><a href="#8-1-插值表达式" class="headerlink" title="8.1 插值表达式"></a>8.1 插值表达式</h2><h3 id="8-1-1-大括号-u007B-u007B"><a href="#8-1-1-大括号-u007B-u007B" class="headerlink" title="8.1.1 大括号 u007B;u007B;"></a>8.1.1 大括号 u007B;u007B;</h3><ol><li><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u007B;u007B;表达式</span><br></pre></td></tr></table></figure><p>说明：</p></li></ol>]]></content>
    
    <summary type="html">
    
      Vue基础
    
    </summary>
    
      <category term="前端开发" scheme="http://xiongtianci-tc.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Vue" scheme="http://xiongtianci-tc.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Java线程状态</title>
    <link href="http://xiongtianci-tc.github.io/2018/11/30/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>http://xiongtianci-tc.github.io/2018/11/30/Java线程状态/</id>
    <published>2018-11-30T09:23:50.000Z</published>
    <updated>2019-05-25T02:56:50.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java线程状态"><a href="#Java线程状态" class="headerlink" title="Java线程状态"></a>Java线程状态</h1><p>网上流传了很久的线程具备5种状态，这样是不贴切JDK中描述的，JDK中描述线程状态只有6种，而网络流传的5种<br>状态就是进程的五态模型。那张广为流传的来自网络的图如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1542897157060.png?raw=true" alt="1542897157060"></p><p>很明显这是操作系统中进程的5种状态，在很多操作系统书中也由介绍分别为new，ready，running，waiting，<br>terminated。不幸的是，有很多的书上常常把这些进程状态，线程状态与Java线程状态混在一起谈。</p><p>进程与线程的区分总图：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1542897357723.png?raw=true" alt="1542897357723"></p><blockquote><ol><li>很多人觉得在JVM线程中应该有，Running运行状态。对JAVA而言，Runnable包含了就绪与运行，那为<br>什么JAVA不区分开呢？这跟CPU分配的时间片有关，而且JAVA进行的是抢占式轮转调度，由于我们的JVM线程是服务于监控，线程又是切换的如此之快，那么区分ready与running又没有多大意义了。<br>再者，我们都知道现在使用的很多JVM底层都将线程映射到操作系统上了，JVM本身没有做什么调度，因为虚拟机看到的都是底层的映射与封装，故而将ready与running映射来也没有太大意义，不如统一为Runnable</li><li>总之还是有些乱的，我们不妨就拿Windows系统为例，用的就是“进程”和“线程”这两种较为标准的叫法，<br>这时一个进程下至少有一个线程，<strong>线程是CPU调度的基本单位</strong>，<strong>进程不参与CPU调度</strong>，CPU根本不知道进程的存在。</li><li>为了避免混乱，下面说的线程状态，只是站在JVM层面上</li></ol></blockquote><p>我们先来看下，这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/1543039901810.png?raw=true" alt="1543039901810"></p><table><thead><tr><th style="text-align:center">线程状态</th><th style="text-align:center">导致状态发生条件</th></tr></thead><tbody><tr><td style="text-align:center">NEW(新建)</td><td style="text-align:center">线程刚被创建，但是并未启动</td></tr><tr><td style="text-align:center">Runnable(可运行)</td><td style="text-align:center">线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器</td></tr><tr><td style="text-align:center">Blocked(锁阻塞)</td><td style="text-align:center">当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态</td></tr><tr><td style="text-align:center">Waiting(无限等待)</td><td style="text-align:center">一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒</td></tr><tr><td style="text-align:center">Timed Waiting(计时等待)</td><td style="text-align:center">同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。</td></tr><tr><td style="text-align:center">Teminated(被终止)</td><td style="text-align:center">因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡</td></tr></tbody></table><blockquote><ol><li>初始(NEW)：新创建了一个线程对象，但还没有调用 <code>start()</code> 方法。</li><li>运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。<br>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）</li><li>阻塞(BLOCKED)：表示线程阻塞于锁</li><li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）</li><li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回</li><li>终止(TERMINATED)：表示该线程已经执行完毕</li></ol></blockquote><h2 id="1-NEW-新建-状态"><a href="#1-NEW-新建-状态" class="headerlink" title="1. NEW(新建)状态"></a>1. NEW(新建)状态</h2><blockquote><p>概念：线程对象创建了，但是还没有启动之前，就是新建状态</p></blockquote><p>实现 <code>Runnable接口</code> 或继承 <code>Thread</code> 可以得到一个线程类，new一个实例出来，线程就进入了初始状态。</p><p>这里强调两点：</p><ul><li>线程对象创建之后，还未开启( 调用start()方法 )时候，就处于NEW的状态</li><li>开启线程，指的是调用start方法，并不是run方法，run方法仅仅作为一个普通方法存在</li></ul><blockquote><p>线程对象调用 <code>run()</code> 方法不开启线程，仅是对象调用方法。线程对象调用 <code>start()</code> 方法开启线程，并让jvm调用 <code>run()</code> 方法在开启的线程中执行</p></blockquote><p>当我们执行 <code>new Thread(target)</code> 时，jvm 要为线程的运行做一些前期的准备工作，比如检查线程类是否已经被加载、解析和初始化过，接下来还要为对象分配空间并对空间初始化零值等。当完成这些准备工作时线程才能进入到下一个 <code>Runnable</code> (可运行)状态。</p><blockquote><p>在我们研究线程状态时，采用Thread中的getState()方法进行研究</p></blockquote><p>通过代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 研究新建线程状态</span></span><br><span class="line"><span class="comment"> *   新建状态：至今还未启动的线程处于这一状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">// 线程默认名：Thread-0 Thread-1...</span></span><br><span class="line">        System.out.println(myThread.getName());</span><br><span class="line">        System.out.println(<span class="string">"线程创建之后处于："</span> + myThread.getState());</span><br><span class="line"></span><br><span class="line">        myThread.run();</span><br><span class="line">        System.out.println(<span class="string">"线程run之后处于："</span> + myThread.getState());</span><br><span class="line"></span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">"线程start之后处于："</span> + myThread.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">//   线程创建之后处于：NEW</span></span><br><span class="line"><span class="comment">//   线程run之后处于：NEW</span></span><br><span class="line"><span class="comment">//   线程start之后处于：RUNNABLE</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们执行 <code>new Thread(target)</code> 时，jvm 要为线程的运行做一些前期的准备工作，比如检查线程类是否已经被加载、解析和初始化过，接下来还要为对象分配空间并对空间初始化零值等。当完成这些准备工作时线程才能进入到下一个 <code>Runnable</code> (可运行)状态。所以说</p><p>当业务需要频繁创建线城市，最好使用线程池，提高效率减轻JVM的压力。当然如果大量线程进行频繁上下文切换，此时多线程的效率会大打折扣。</p></blockquote><h2 id="2-RUNNABLE-可运行-状态"><a href="#2-RUNNABLE-可运行-状态" class="headerlink" title="2. RUNNABLE(可运行)状态"></a>2. RUNNABLE(可运行)状态</h2><blockquote><p>可运行状态：一个在JVM中执行的线程处于这个状态中，等待JVM调度，德能在执行，也可能在等待</p></blockquote><blockquote><p>注：这里的等待指的是等待调度，等待的是系统资源，如IO、CPU时间片，与 sleep、lock 的等待有着本质差别。</p></blockquote><p>接下来使用代码演示一个最简单的可运行状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程开始执行"</span>);</span><br><span class="line">        System.out.println(<span class="string">"线程开始执行具体的任务"</span>);</span><br><span class="line">        <span class="comment">// 假设这个任务使用5秒钟</span></span><br><span class="line">        <span class="keyword">long</span> beiginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (System.currentTimeMillis()-beiginTime &lt; <span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="comment">// 假设做了5秒钟的任务</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"线程执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可运行状态</span></span><br><span class="line"><span class="comment"> *   当线程有资格运行，调用了start方法，线程首先进入可运行状态</span></span><br><span class="line"><span class="comment"> *   这种可运行状态不一定被线程调度运行</span></span><br><span class="line"><span class="comment"> *   简单来说，调用start方法之后，该线程处于可运行状态，但未运行</span></span><br><span class="line"><span class="comment"> *   此时存放在"可运行池"中</span></span><br><span class="line"><span class="comment"> *   线程在运行的过程中，自然该线程也是处于可运行状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   JDK中处于可运行状态的线程，有两种，一种是正在JVM中运行，</span></span><br><span class="line"><span class="comment"> *   另一种是可能正在等待操作系统其它资源，比如处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">"创建完成之后："</span> + myThread.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">"开启线程之后："</span> + myThread.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-BLOCHED-阻塞-状态"><a href="#3-BLOCHED-阻塞-状态" class="headerlink" title="3. BLOCHED(阻塞)状态"></a>3. BLOCHED(阻塞)状态</h2><p>我们还是使用代码来解析一下锁阻塞状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(String name,Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同步代码块</span></span><br><span class="line">        <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程A开始执行"</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程A真正开始执行代码了"</span>);</span><br><span class="line">            <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 模拟5秒钟的任务</span></span><br><span class="line">            <span class="keyword">while</span>(System.currentTimeMillis()-beginTime &lt; <span class="number">5000</span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"线程A执行完毕"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(String name,Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同步代码块</span></span><br><span class="line">        <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程B开始执行"</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程B真正开始执行代码了"</span>);</span><br><span class="line">            <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 模拟5秒钟的任务</span></span><br><span class="line">            <span class="keyword">while</span>(System.currentTimeMillis()-beginTime &lt; <span class="number">5000</span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"线程B执行完毕"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程状态之阻塞状态BLOCKED</span></span><br><span class="line"><span class="comment"> *    JDK：锁阻塞并且正在等待监视器锁的某一线程状态</span></span><br><span class="line"><span class="comment"> *    处于受阻状态的某一线程正在等待监视器锁，以便进入一个同步代码块/同步方</span></span><br><span class="line"><span class="comment"> *    还有就是 调用Object.wart方法之后，再次进入同步中时</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个锁对象</span></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程A、B</span></span><br><span class="line">        ThreadA a = <span class="keyword">new</span> ThreadA(<span class="string">"线程A"</span>, obj);</span><br><span class="line">        ThreadB b = <span class="keyword">new</span> ThreadB(<span class="string">"线程B"</span>, obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">"线程A的状态是："</span> + a.getState());</span><br><span class="line">        System.out.println(<span class="string">"线程B的状态是："</span> + b.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">"线程A的状态是："</span> + a.getState());</span><br><span class="line">        System.out.println(<span class="string">"线程B的状态是："</span> + b.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们只是对之前分析的情况一进行了阐释</p><h2 id="4-Timed-Waiting-计时等待-状态"><a href="#4-Timed-Waiting-计时等待-状态" class="headerlink" title="4. Timed Waiting(计时等待)状态"></a>4. Timed Waiting(计时等待)状态</h2><blockquote></blockquote><p>带指定的等待时间的等待线程所处的状态。一个线程处于这一状态是因为用一个指定的正的等待时间（为参数）调用了一下方法中的其一：</p><ul><li>Thread.sleep</li><li>带时限（timeout）的 Object.wait</li><li>带时限（timeout）的 Thread.join</li><li>LockSupport.parkNanos</li><li>LockSupport.parkUntil</li></ul><p>Timed Waiting 在API中的描述为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。单独的去理解这句话，真是玄之又玄，其实我们在之前的操作中已经接触过这个状态了，在哪里呢？</p><p>在我们写卖票的案例中，为了减少线程执行太快，现象不明显等问题，我们在run方法中添加了sleep语句，这样就强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。</p><blockquote><p>注：sleep的使用时区别去其他方法的。</p></blockquote><p>其实当我们调用了sleep方法之后，当前执行的线程就进入到“休眠状态”，其实就是所谓的Timed Waiting（计时等待），那么我们通过一个案例加深对该状态的一个理解：</p><p>实现一个计数器，计数到100，在每个数字之间暂停1秒，每隔10个数字输出一个字符串</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限时等待</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"mt的线程状态： "</span> + myThread.getState());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现一个计算器，0-99计数，在每个数字之间暂停1秒，每个10个数字输出一个字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"oewewowllskd "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">"    休息了1秒"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过案例可以发西咸，sleep方法的使用还是很简单的。我们需要记住下面几点：</p><ol><li>进入 TIMED_WAITING 状态的一种常见情形是调用的 sleep 方法，单独的线程也可以调用，不一定非要有协作关系。</li><li>为了让其他线程有机会执行，可以将Thread.sleep() 的调用放线程run()之内，这样才能保证该线程执行过程中会睡眠</li><li>sleep 与锁无关，线程睡眠到期自动苏醒，并返回到 Runnable（可运行）状态</li></ol><blockquote><p>小提示：sleep() 中指定的时间是线程不会运行的最短时间。因此，sleep() 方法不能保证该线程睡眠到期后就开始立刻执行</p></blockquote><h2 id="5-WAITING-无限等待-状态"><a href="#5-WAITING-无限等待-状态" class="headerlink" title="5. WAITING(无限等待)状态"></a>5. WAITING(无限等待)状态</h2><p>Wating状态在API中介绍为：一个正在无限期等待另一个线程执行一个特别的（唤醒）动作的线程处于这一状态。</p><p>一个线程进入 WAITING 状态是因为调用了以下方法：</p><ul><li>不带时限的 Object.wait 方法</li><li>不带时限的 Thread.join 方法</li><li>LockSupport.park</li></ul><p>然后会等其他线程执行一个特别的动作，比如：</p><ul><li>一个调用了某个对象的 Object.wait 方法的线程会等待另一个线程调用此对象的 Object.notify() 或 Object.notifyAll()</li><li>一个调用了 Thread.join 方法的线程会等待指定的线程结束</li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无限等待</span></span><br><span class="line"><span class="comment"> *   Object中的wait方法完成</span></span><br><span class="line"><span class="comment"> *     使用当前线程 进入无限等待状态，直到其他线程有唤醒 notify 或 notifyAll 才能被唤醒</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     线程间通信 两个线程执行不同的操作 关联的</span></span><br><span class="line"><span class="comment"> *       两个线程 使用同样的锁 只能使用锁对象调用wait方法或者notify方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用匿名函数创建线程</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"获取到锁，调用wait方法，当前线程进入无线等待状态。。。等待着别的线程来唤醒"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">"唤醒了这个线程，就不再是线程等待了，线程执行完毕"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 开启线程t1</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用匿名内部内方式创建一个新的线程，用来唤醒t1线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取到锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 3秒钟后执行唤醒操作</span></span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">"获取到锁 执行 唤醒操作"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 唤醒操作</span></span><br><span class="line">                    obj.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4秒后查看线程t1状态</span></span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        System.out.println(<span class="string">"查看t1的线程状态"</span> + t1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述案例我们会发现，一个调用了某个对象的 Object.wait 方法的线程会等待另一个线程调用此对象的 Object.notify() 方法或 Object.notifyAll() 方法</p><p>其实 waiting 状态并不是一个线程的操作，它体现的是多个线程间的通信，可以理解为多个线程之间的协作关系，<br>多个线程会争取锁，同时相互之间又存在协作关系。就好比在公司了你和你的同事们，你们可能存在晋升时的竞争，但更多时候你们更多是一起合作一完成某些任务。</p><h2 id="6-TEMINATED-终止-状态"><a href="#6-TEMINATED-终止-状态" class="headerlink" title="6. TEMINATED(终止)状态"></a>6. TEMINATED(终止)状态</h2><p>线程因如下两个原因之一将被终止：</p><ol><li>run() 方法正常退出而自然死亡</li><li>一个没有捕获的异常终止了 run() 方法而意外死亡</li></ol><h1 id="线程的方法"><a href="#线程的方法" class="headerlink" title="线程的方法"></a>线程的方法</h1><h2 id="1-wait-notify-notifyAll-等方法介绍"><a href="#1-wait-notify-notifyAll-等方法介绍" class="headerlink" title="1. wait(), notify(), notifyAll()等方法介绍"></a>1. wait(), notify(), notifyAll()等方法介绍</h2><p>在Object.java中，定义了wait(), notify()和notifyAll()等接口。<strong><code>wait()</code> 的作用是让当前线程进入等待状态</strong>，同时，wait()也会让当前线程释放它所持有的锁。而notify()和notifyAll()的作用，则是唤醒当前对象上的等待线程；<strong><code>notify()</code> 是唤醒单个线程</strong>，<strong>而 <code>notifyAll()</code> 是唤醒所有的线程</strong>。</p><p>Object类中关于等待/唤醒的API详细信息如下：<br><strong>notify()</strong>        – 唤醒在此对象监视器上等待的单个线程。<br><strong>notifyAll()</strong>   – 唤醒在此对象监视器上等待的所有线程。<br><strong>wait()</strong>                                         – 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。<br><strong>wait(long timeout)</strong>                    – 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。<br><strong>wait(long timeout, int nanos)</strong>  – 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量”，当前线程被唤醒(进入“就绪状态”)。</p>]]></content>
    
    <summary type="html">
    
      Java线程状态
    
    </summary>
    
      <category term="后台开发" scheme="http://xiongtianci-tc.github.io/categories/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java线程" scheme="http://xiongtianci-tc.github.io/tags/Java%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://xiongtianci-tc.github.io/2018/11/30/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://xiongtianci-tc.github.io/2018/11/30/Flex布局/</id>
    <published>2018-11-30T09:12:44.000Z</published>
    <updated>2019-05-25T02:57:20.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex-布局教程：语法篇"><a href="#Flex-布局教程：语法篇" class="headerlink" title="Flex 布局教程：语法篇"></a>Flex 布局教程：语法篇</h1><p>作者： <a href="http://www.ruanyifeng.com/blog//" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2015/07/" target="_blank" rel="noopener">2015年7月10日</a></p><p>网页布局（layout）是 CSS 的一个重点应用</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071001.gif?raw=true" alt="img"></p><p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model" target="_blank" rel="noopener">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="noopener"><code>float</code></a>属性。它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">垂直居中</a>就不容易实现。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071002.png?raw=true" alt="img"></p><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071003.jpg?raw=true" alt="img"></p><p>Flex 布局将成为未来布局的首选方案。本文介绍它的语法，<a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">下一篇文章</a>给出常见布局的 Flex 写法。网友<a href="http://vgee.cn/" target="_blank" rel="noopener">JailBreak</a> 为本文的所有示例制作了 <a href="http://static.vgee.cn/static/index.html" target="_blank" rel="noopener">Demo</a>，也可以参考。</p><p>以下内容主要参考了下面两篇文章：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">A Complete Guide to Flexbox</a> 和 <a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties" target="_blank" rel="noopener">A Visual Guide to CSS3 Flexbox Properties</a>。</p><h2 id="一、Flex-布局是什么？"><a href="#一、Flex-布局是什么？" class="headerlink" title="一、Flex 布局是什么？"></a>一、Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-class">.box</span>&#123;</span><br><span class="line">&gt;   display: flex;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>行内元素也可以使用 Flex 布局。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-class">.box</span>&#123;</span><br><span class="line">&gt;   display: inline-flex;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-class">.box</span>&#123;</span><br><span class="line">&gt;   display: -webkit-flex; /* Safari */</span><br><span class="line">&gt;   <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071004.png?raw=true" alt="img"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><h2 id="三、容器的属性-紫色大盒子"><a href="#三、容器的属性-紫色大盒子" class="headerlink" title="三、容器的属性  (紫色大盒子) *"></a>三、容器的属性  (紫色大盒子) *</h2><p>以下6个属性设置在容器上。</p><blockquote><ul><li>flex-direction  √</li><li>flex-wrap  √</li><li>flex-flow</li><li>justify-content  √</li><li>align-items √</li><li>align-content</li></ul></blockquote><h3 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性 **"></a>3.1 flex-direction属性 **</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; .box &#123;</span><br><span class="line">&gt;   flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071005.png?raw=true" alt="img"></p><p>它可能有4个值。</p><blockquote><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul></blockquote><h3 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性 **"></a>3.2 flex-wrap属性 **</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071006.png?raw=true" alt="img"></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; .box&#123;</span><br><span class="line">&gt;   flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>它可能取三个值。</p><p>（1）<code>nowrap</code>（默认）：不换行。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071007.png?raw=true" alt="img"></p><p>（2）<code>wrap</code>：换行，第一行在上方。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071008.jpg?raw=true" alt="img"></p><p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071009.jpg?raw=true" alt="img"></p><h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; .box &#123;</span><br><span class="line">&gt;   flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性  **"></a>3.4 justify-content属性  **</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-class">.box</span> &#123;</span><br><span class="line">&gt;   justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071010.png?raw=true" alt="img"></p><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><blockquote><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></blockquote><h3 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性 **"></a>3.5 align-items属性 **</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; .box &#123;</span><br><span class="line">&gt;   align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071011.png?raw=true" alt="img"></p><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><blockquote><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></blockquote><h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; .box &#123;</span><br><span class="line">&gt;   align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071012.png?raw=true" alt="img"></p><p>该属性可能取6个值。</p><blockquote><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul></blockquote><h2 id="四、项目的属性-橙色小盒子"><a href="#四、项目的属性-橙色小盒子" class="headerlink" title="四、项目的属性  (橙色小盒子) *"></a>四、项目的属性  (橙色小盒子) *</h2><p>以下6个属性设置在项目上。</p><blockquote><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul></blockquote><h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; .item &#123;</span><br><span class="line">&gt;   order: &lt;integer&gt;;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071013.png?raw=true" alt="img"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; .item &#123;</span><br><span class="line">&gt;   flex-grow: &lt;number&gt;; /* default 0 */</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071014.png?raw=true" alt="img"></p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; .item &#123;</span><br><span class="line">&gt;   flex-shrink: &lt;number&gt;; /* default 1 */</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071015.jpg?raw=true" alt="img"></p><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; .item &#123;</span><br><span class="line">&gt;   flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性 **"></a>4.5 flex属性 **</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; .item &#123;</span><br><span class="line">&gt;   flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; .item &#123;</span><br><span class="line">&gt;   align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Filex%E5%B8%83%E5%B1%80/bg2015071016.png?raw=true" alt="img"></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
    
    <summary type="html">
    
      Flex布局
    
    </summary>
    
      <category term="前端开发" scheme="http://xiongtianci-tc.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Flex" scheme="http://xiongtianci-tc.github.io/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://xiongtianci-tc.github.io/2018/11/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://xiongtianci-tc.github.io/2018/11/30/Linux常用命令/</id>
    <published>2018-11-30T08:19:55.000Z</published>
    <updated>2019-05-25T02:57:51.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Linux介绍（了解）"><a href="#1-Linux介绍（了解）" class="headerlink" title="1. Linux介绍（了解）"></a>1. Linux介绍（了解）</h1><h2 id="1-1、Linux和Windows的区别"><a href="#1-1、Linux和Windows的区别" class="headerlink" title="1.1、Linux和Windows的区别"></a>1.1、Linux和Windows的区别</h2><p>Linux是一款操作系统。正规开发服务器项目部署都是放在Linux操作系统上。</p><p>Windows一款操作系统，民用操作系统。娱乐、影音、上网。</p><h2 id="1-2、Linux历史及使用场景"><a href="#1-2、Linux历史及使用场景" class="headerlink" title="1.2、Linux历史及使用场景"></a>1.2、Linux历史及使用场景</h2><p>Linux诞生90年代，仿制Unix操作系统。</p><p>Linux是免费的，开源的</p><p>Unix是收费的，封闭的。 </p><p>Linux使用场景：<strong>服务器操作系统</strong>，移动设备（安卓手机，平板电脑），路由器（WIFI），交换机，智能家居，Java程序开发</p><h2 id="1-3、Linux的版本"><a href="#1-3、Linux的版本" class="headerlink" title="1.3、Linux的版本"></a>1.3、Linux的版本</h2><p>Linux的版本分为两种：内核版本(<a href="https://www.kernel.org/)和发行版本" target="_blank" rel="noopener">https://www.kernel.org/)和发行版本</a></p><p>Linux内核版本：Linux内核运维开发小组。 源码在一定程度上不是开源的。</p><p>Linux发行版本：由各大互联网/软件公司定制。 外围的样式功能的源码完全开源</p><p>一个内核版本是有多种多样的发行版本 </p><p>Ubuntu：以强大的桌面应用为主，吸收不少Windows用户。</p><ul><li>因为桌面应用会在一定程度上大量占用系统资源，开发。</li><li>服务器部署上，不会优先选择Ubuntu</li></ul><p><strong>CentOS</strong>：对服务器性能进行了一定程度的优化，性能比较高，比较稳定。</p><ul><li>服务器操作系统的优选CentOS</li></ul><h1 id="2、Linux安装【重点】"><a href="#2、Linux安装【重点】" class="headerlink" title="2、Linux安装【重点】"></a>2、Linux安装【重点】</h1><h2 id="2-1、虚拟机、Linux安装"><a href="#2-1、虚拟机、Linux安装" class="headerlink" title="2.1、虚拟机、Linux安装"></a>2.1、虚拟机、Linux安装</h2><h2 id="2-2、CentOS安装jdk、tomcat、mysql"><a href="#2-2、CentOS安装jdk、tomcat、mysql" class="headerlink" title="2.2、CentOS安装jdk、tomcat、mysql"></a>2.2、CentOS安装jdk、tomcat、mysql</h2><h2 id="2-3、Linux目录介绍"><a href="#2-3、Linux目录介绍" class="headerlink" title="2.3、Linux目录介绍"></a>2.3、Linux目录介绍</h2><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1538621186769.png?raw=true" alt="1538621186769"></p><ul><li><p><strong>/</strong>：<strong>Linux系统根目录</strong></p></li><li><p><strong>/etc</strong>：(etcetera) <strong>系统配置文件存放的目录</strong>，不建议在此目录下存放可执行文件。</p><p>重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。</p><p>注：/etc/X11存放与 x windows 有关的设置（防火墙文件，网络设置文件，JDK环境配置文件，mysql）</p></li><li><p><strong>home</strong>:存放所有普通用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用<code>~user</code>表示</p></li><li><p><strong>/root</strong>： <strong>系统管理员root(超级用户)的家目录</strong>，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下</p><p>每一个用户都有家目录，超级管理员root家目录  /root</p><p>Linux命令行模式中相当于Windows的桌面</p></li><li><p><strong>/usr</strong>：(unix shared resources)：<strong>应用程序存放目录</strong>，比较重要的目录<code>/usr/local</code>本地系统管理员软件安装目录（安装系统级的应用）</p><p>/usr/bin 存放应用程序</p><p>/usr/share 存放共享数据</p><p>/usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</p><p>/usr/local:存放软件升级包</p><p>/usr/share/doc: 系统说明文件存放目录</p><p>/usr/share/man: 程序说明文件存放目录，使用 man ls时会查询/usr/share/man/man1/ls.1.gz的内容建议单独分区，设置较大的磁盘空间。<br>​    Jdk,tomcat,mysql,redis,nginx</p></li><li><p><strong>/opt</strong>：<strong>额外安装的可选应用程序包</strong>所放置的位置。一般情况下，我们可以把tomcat等都安装到这里</p></li></ul><p>以上建议并不是强制性约束</p><h2 id="2-4-网络三种连接方式"><a href="#2-4-网络三种连接方式" class="headerlink" title="2.4 网络三种连接方式"></a>2.4 网络三种连接方式</h2><h3 id="2-4-1-桥接模式"><a href="#2-4-1-桥接模式" class="headerlink" title="2.4.1 桥接模式"></a>2.4.1 桥接模式</h3><p><strong>桥接模式</strong>(Bridged)：虚拟机是一台独立的电脑，直接连接到实际的网络上，与宿主机没有任何联系。</p><p> <img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1543535328477.png?raw=true" alt="1543535328477"></p><h3 id="2-4-2-仅主机模式"><a href="#2-4-2-仅主机模式" class="headerlink" title="2.4.2 仅主机模式"></a>2.4.2 仅主机模式</h3><blockquote><p>这种方式下，虚拟机的网卡连接到宿主的 VMnet1 上，但系统并不为虚拟机提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到实际网络上。</p></blockquote><p> <strong>仅主机模式</strong>(host-only)：虚拟机可以访问宿主机，宿主机无法访问虚拟机，虚拟机无法上网</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1543535410144.png?raw=true" alt="1543535410144"></p><h3 id="2-4-3-NAT-模式"><a href="#2-4-3-NAT-模式" class="headerlink" title="2.4.3 NAT 模式"></a>2.4.3 NAT 模式</h3><blockquote><p>这种方式下，虚拟机的网卡连接到宿主的 VMnet8 上。此时系统的 VMWare NAT Service 服务就充当了路由器的作用，负责将虚拟机发到 VMnet8 的包进行地址转换之后发到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMWare DHCP Service 负责为虚拟机提供 DHCP 服务。</p></blockquote><p><strong>NAT模式</strong>：</p><ul><li><p>虚拟机可以访问宿主机，宿主机可以访问虚拟机</p></li><li><p>此时宿主机相当于路由器，虚拟机可以通过宿主机上网</p></li><li><p>宿主机可以配置254个虚拟机 </p></li></ul><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1543535431117.png?raw=true" alt="1543535431117"></p><h1 id="3、常用命令【重点】"><a href="#3、常用命令【重点】" class="headerlink" title="3、常用命令【重点】"></a>3、常用命令【重点】</h1><p>Linux命令中参数，一般都是无序的。特殊情况下除外</p><p>注意：Linux中的命令<strong>严格区分大小写</strong>的！</p><h2 id="3-1、磁盘管理命令"><a href="#3-1、磁盘管理命令" class="headerlink" title="3.1、磁盘管理命令"></a>3.1、磁盘管理命令</h2><h3 id="ls-列出目录内容"><a href="#ls-列出目录内容" class="headerlink" title="ls 列出目录内容"></a><em>ls</em> 列出目录内容</h3><ol><li><p>ls（list）功能：列出目录内容</p></li><li><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ls [参数] [文件或目录]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-a或--all   查询所有文件和文件夹，包含隐藏。注意隐藏文件、特殊目录、. 和 ..</span><br><span class="line">-l   查询详细列表    ls -l--&gt;简写：ll</span><br><span class="line">-h 友好展示信息    ll -h (d目录，-普通文件, l链接)</span><br><span class="line"></span><br><span class="line">-t  用文件和目录的更改时间排序。</span><br><span class="line">-r 反向排序</span><br><span class="line">--help   在线帮助</span><br></pre></td></tr></table></figure></li><li><p>常用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l--&gt; 此命令非常常用，提供简化版命令 ll</span><br><span class="line">ls -al</span><br><span class="line">ll /home/--&gt; 显示指定目录下的内容</span><br></pre></td></tr></table></figure></li><li><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需求：展示某个目录下的内容    ls 目录名</span><br><span class="line">所在位置：/root</span><br><span class="line">想要查看:/etc目录下的内容</span><br><span class="line">命令：ll -h /etc</span><br></pre></td></tr></table></figure></li></ol><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a><em>cd</em> 切换目录</h3><ol><li><p>cd(change directory) 功能：切换目录</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">cd [目录]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 常用</span><br><span class="line">cd /目录名   ，任意目录切换到指定目录中     /目录名--&gt;Linux的绝对路径</span><br><span class="line">   windows绝对路径--&gt;c:/xxxx/xxx.jpg?raw=true</span><br><span class="line">cd ../  ，向上一层目录</span><br><span class="line">cd ~，切换到当前用户 家目录。root用户家目录 /root</span><br><span class="line">cd /，切换到Linux的 根目录</span><br><span class="line">cd -  ，切换到上一次访问的目录。   只能两个目录相互切换</span><br><span class="line">cd ..，上一级目录</span><br><span class="line">cd，缺省当前用户目录</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>Linux绝对</strong>：  <ul><li>eg：<code>cd /etc/x1</code>   先切换到 /目录，然后在 /目录 中找到子目录 etc，在 etc 中找 子目录x1</li><li>特点：在任意目录都可以随意切换</li></ul></li><li><strong>Linux相对</strong>：<ul><li>eg：<code>cd x1/x2</code>   在当前目录中寻找子目录x1, 在x1中寻找子目录x2</li><li>特点：必须确定 当前目录 下有子目录x1</li></ul></li></ul><h3 id="pwd-显示当前的所在目录"><a href="#pwd-显示当前的所在目录" class="headerlink" title="pwd 显示当前的所在目录"></a><em>pwd</em> 显示当前的所在目录</h3><ul><li>pwd(print working directory) 功能：显示工作目录(当前的所在目录)。返回绝对路径</li></ul><h3 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a><em>mkdir</em> 创建目录</h3><ol><li><p>mkdir（make directoriy）功能： 创建目录</p></li><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">mkdir -p 文件夹名称</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-p  父目录不存在情况下先生成父目录 （parents）</span><br><span class="line">-v显示命令执行过程中的详细信息</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><p>使用<code>mkdir</code>创建带后缀的文件时，创建的是<strong>目录</strong>，不是文件（创建文件使用<code>touch</code>命令）</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1539658915126.png?raw=true" alt="1539658915126"> </p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1539659032657.png?raw=true" alt="1539659032657"> </p></li><li><p>eg:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1</span><br><span class="line">需要在/root/t1目录下创建一个t2目录</span><br><span class="line">位置：/root</span><br><span class="line">命令：相对路径：mkdir t1/t2</span><br><span class="line">绝对：mkdir /root/t1/t2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2</span><br><span class="line">需要在/root/t3目录下创建一个t4目录</span><br><span class="line">位置：/root</span><br><span class="line">条件：t3和t4都不存在</span><br><span class="line">命令：mkdir -p t3/t4</span><br></pre></td></tr></table></figure></li></ol><h3 id="rmdir-删除空目录"><a href="#rmdir-删除空目录" class="headerlink" title="rmdir 删除空目录"></a><em>rmdir</em> 删除空目录</h3><ul><li>rmdir(remove directory) 功能：删除空目录</li></ul><h3 id="指令快捷键"><a href="#指令快捷键" class="headerlink" title="指令快捷键"></a>指令快捷键</h3><ol><li><p>历史输入<br>使用上、下箭头可以找出上一条指令和下一条指令</p></li><li><p>Tab代码补全<br>使用tab键可以快速输入指令<br>比如：我要输入shutdown指令，这时，我们可以只输入shut然后按下tab键，即可自动把shutdown补全</p><p><strong>注意</strong>：使用两下Tab补全时，如果匹配的结果有多个，这时候将会把所有匹配的结果展示出来。当结果很多时将会出现以下结果：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1539654279277.png?raw=true" alt="1539654279277"> </p><p>按<code>y</code>之后会列出所有匹配的结果，但因为129个比较多，而在电脑中无法一次全显示出来，所以先显示一部分：（More代表还有更多，这时按<code>回车</code>就可以向下滚动，按下<code>Ctrl+C</code>将会退出）</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1539654354678.png?raw=true" alt="1539654354678"> </p></li></ol><h2 id="3-2、文件浏览-管理-命令"><a href="#3-2、文件浏览-管理-命令" class="headerlink" title="3.2、文件浏览(管理)命令"></a>3.2、文件浏览(管理)命令</h2><p>日志文件,XML,properties文件</p><h3 id="cat-快捷查看当前文件的内容"><a href="#cat-快捷查看当前文件的内容" class="headerlink" title="cat 快捷查看当前文件的内容"></a><em>cat</em> 快捷查看当前文件的内容</h3><ol><li><p>cat（catenate）功能：快捷查看当前文件的内容</p><p>cat适合查看少量信息的文件</p></li><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">cat 文件名</span><br></pre></td></tr></table></figure></li></ol><h3 id="more-分页显示文件内容"><a href="#more-分页显示文件内容" class="headerlink" title="more 分页显示文件内容"></a><em>more</em> 分页显示文件内容</h3><ol><li><p>more功能：分页显示文件内容，还支持直接跳转行等功能</p></li><li><p><strong>语法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 文件名</span><br></pre></td></tr></table></figure></li><li><p>操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enter    向下n行，需要定义。默认为1行</span><br><span class="line">空格键    向下滚动一屏 或 Ctrl+F</span><br><span class="line">B        返回上一屏 或 Ctrl+B</span><br><span class="line">q        退出more</span><br></pre></td></tr></table></figure></li></ol><h3 id="less-分页显示文件内容"><a href="#less-分页显示文件内容" class="headerlink" title="less 分页显示文件内容"></a><em>less</em> 分页显示文件内容</h3><ol><li><p>less功能：分页显示文件内容，操作更详细</p></li><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">less -mN 文件名 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-m  显示类似more命令的百分比</span><br><span class="line">-N  显示每行的行号</span><br></pre></td></tr></table></figure></li><li><p>操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Enter    向下n行，需要定义。默认为1行</span><br><span class="line">空格键    向下滚动一屏 或 Ctrl+F</span><br><span class="line">B    返回上一屏 或 Ctrl+B</span><br><span class="line">q    退出more</span><br><span class="line"></span><br><span class="line">d    前进半页</span><br><span class="line">u    后退半页</span><br><span class="line">回车键    前进一行 或 方向键向下</span><br><span class="line">y    后退一行或 方向键向上</span><br><span class="line">v    进入vim编辑器</span><br><span class="line">/字符串   向下搜索</span><br><span class="line">?字符串   向上搜索</span><br><span class="line">左右方向键 相当于水平滚动条</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><p>适用于<strong>大量数据</strong>的查看</p></li></ol><h3 id="tail-指定文件末尾内容"><a href="#tail-指定文件末尾内容" class="headerlink" title="tail 指定文件末尾内容"></a><em>tail</em> 指定文件末尾内容</h3><ol><li><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件</p></li><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">tail[必要参数][选择参数][文件]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-n&lt;行数&gt;显示行数</span><br><span class="line">-f 循环读取</span><br></pre></td></tr></table></figure></li><li><p>eg：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/clip_image001.png?raw=true" alt="img"></p><ul><li>&amp; 表示后台运行，否则占用终端</li><li>ctrl + c 退出</li></ul></li></ol><h2 id="3-3、文件操作命令"><a href="#3-3、文件操作命令" class="headerlink" title="3.3、文件操作命令"></a>3.3、文件操作命令</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ol><li><p>隐藏文件</p><p>Linux中以 点<code>.</code> 开头的是隐藏文件，使用<code>ls</code>命令是查看不到的，需使用<code>ls -a</code></p></li><li><p>目录与文件的区别</p><p>当我们使用ls命令列出目录中的所有子目录和文件时，如何区分哪些是文件哪些是目录？<br>可以通过详细信息中第一列的信息来区分：以 <code>d</code> 开头的是目录，以 <code>-</code> 开头的是文件</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1539658318279.png?raw=true" alt="1539658318279"> </p></li></ol><h3 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a><em>touch</em>创建文件</h3><ol><li><p>功能：创建文件</p></li><li><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 绝对路径/相对路径</span><br></pre></td></tr></table></figure></li></ol><h3 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a><em>cp</em> 复制</h3><ol><li><p>cp（copy）：复制文件或者复制目录</p></li><li><p>复制<strong>文件</strong>：</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp 需要复制的文件 复制的位置</span><br></pre></td></tr></table></figure><p>注意：cp可以进行重命名操作：</p><ul><li><p>cp demo1.java t1/ddd.java</p><p>当将一个 文件位置 以不同名字复制到<strong>当前文件</strong>时，意思是复制并重命名；即 将demo1.java复制到t1目录中，并重命名成ddd.java</p></li></ul></li><li><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">需求：把/root/Demo1.java文件 复制到  /root/t1 目录中</span><br><span class="line">位置：/root</span><br><span class="line">命令：cp Demo1.java t1</span><br><span class="line"> cp /root/Demo1.java /root/t1</span><br><span class="line"></span><br><span class="line">需求：把/root/Demo1.java文件 复制到  /root/t1 目录中，改名为ddd.java</span><br><span class="line">位置：/root</span><br><span class="line">命令：cp Demo1.java t1/ddd.java</span><br></pre></td></tr></table></figure></li></ul></li><li><p>复制<strong>目录</strong>：</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">cp -r 需要复制的目录 复制的位置</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-r或--recursive  递归处理，将指定目录下的文件与子目录一并处理 复制目录必须使用-r</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需求：把/root/t5目录 复制到  /root/t1目录中</span><br><span class="line">位置：/root</span><br><span class="line">命令：cp -r t5 t1</span><br><span class="line"> cp -r /root/t5 /root/t1</span><br><span class="line"> </span><br><span class="line">cp ./abc ./xxx#无法复制目录</span><br><span class="line">cp -r ./abc ./xxx#复制目录必须使用 -r参数</span><br></pre></td></tr></table></figure></li></ul><h3 id="mv-移动、更名"><a href="#mv-移动、更名" class="headerlink" title="mv 移动、更名"></a><em>mv</em> 移动、更名</h3><ol><li><p>mv(move) 功能： <strong>移动</strong> 或 <strong>更名</strong> 现有的文件或目录</p></li><li><p>移动<strong>文件</strong>：</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">mv -f 需要移动的文件 移动的位置</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-f或--force 　若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件或目录，不进行询问</span><br></pre></td></tr></table></figure></li><li><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">需求：把/root/t5 目录 移动到 /root/t3目录中</span><br><span class="line">位置：/root</span><br><span class="line">命令：mv t5 t3</span><br><span class="line"></span><br><span class="line">需求：把/root/t5 目录 移动到 /root/t3目录中</span><br><span class="line">不询问，直接覆盖</span><br><span class="line">位置：/root</span><br><span class="line">已知：/root/t3目录中 已经有一个t5目录了</span><br><span class="line">命令：mv -f t5 t3</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文件<strong>更名</strong>：</p><ul><li><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv 需要移动的文件 新名字</span><br><span class="line"><span class="meta">#</span># 必须是在同一目录中进行此操作</span><br></pre></td></tr></table></figure></li><li><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件/目录更名操作：</span><br><span class="line">需求：把/root/Demo1.java  改名为 hehe.java</span><br><span class="line">位置：/root</span><br><span class="line">命令：mv Demo1.java hehe.java</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a><em>rm</em> 删除</h3><ol><li><p>rm(remove) 功能：删除文件或目录</p></li><li><p>删除<strong>文件</strong>：</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm 文件名</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除<strong>目录</strong>：</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">rm -rf 目录名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-f或--force 　强制删除文件或目录，不进行询问</span><br><span class="line">-r或-R或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。删除目录必须使用-r</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注意</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf *     删除 当前目录 下所有内容</span><br><span class="line">rm –rf /*    删除Linux系统 根目录 下所有内容</span><br></pre></td></tr></table></figure></li><li><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需求：删除/root/t5 目录， </span><br><span class="line">位置：/root</span><br><span class="line">已知：t5目录下有子目录或者文件</span><br><span class="line">命令：rm -rf t5</span><br></pre></td></tr></table></figure></li></ol><h3 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a><em>find</em> 查找</h3><ol><li><p>find功能：查找文件或目录</p></li><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find 目录名 -name '需要查找的字符串'</span><br><span class="line"></span><br><span class="line">-name 指定字符串作为寻找文件或目录的范本样式</span><br><span class="line">* 表示0~多个任意字符 eg：find t1 -name '*.txt'</span><br></pre></td></tr></table></figure></li><li><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求：查找/root目录下 所有以ins开头的文件或者目录</span><br><span class="line">位置：/root</span><br><span class="line">命令：find /root -name &apos;ins*&apos;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-4、文档编辑命令"><a href="#3-4、文档编辑命令" class="headerlink" title="3.4、文档编辑命令"></a>3.4、文档编辑命令</h2><p>Windows是有记事本<br>Linux也有类似的记事本功能   VIM编辑器</p><h3 id="VI-编辑"><a href="#VI-编辑" class="headerlink" title="VI 编辑"></a><em>VI</em> 编辑</h3><ol><li><p>操作：</p><ul><li>输入 <code>vi 文件名</code>  进入 “命令(一般)模式”</li><li>按下 “<strong>i</strong>” 从一般模式，进入“插入模式”</li><li>按下 “<strong>esc</strong>” 从“插入模式”退出到“一般模式”</li><li>在“一般模式”下，输入 “<strong>:wq</strong>”，退出编辑</li></ul><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1538637143785.png?raw=true" alt="1538637143785"></p></li><li></li></ol><h3 id="vim-命令"><a href="#vim-命令" class="headerlink" title="vim 命令"></a><em>vim</em> 命令</h3><ol><li><p>操作：</p><ul><li>输入 <code>vim 文件名</code> 或 <code>vi 文件名</code> 进入 “一般模式”</li><li>按下 “<strong>i</strong>” 从一般模式，进入“插入模式”</li><li>按下 “<strong>esc</strong>” 从“插入模式”退出到“一般模式”</li><li>在“一般模式”下，输入 “<strong>:wq</strong>”，退出编辑</li></ul><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1538637143785.png?raw=true" alt="1538637143785"></p></li><li><ul><li><strong>一般(命令)</strong>模式:<ul><li>可以<strong>浏览文件内容</strong>，可以进行文本快捷操作（单行复制，多行复制，单行删除，多行删除…）</li><li>按 <strong>i/a/o</strong> 可以切换到 <strong>插入</strong>模式<br>按 <strong>:</strong> 可以切换到 <strong>底行</strong>模式</li></ul></li><li><strong>插入</strong>模式：<ul><li>可以<strong>编辑</strong>文件内容。</li><li>按 <strong>ESC</strong> 可以切回 <strong>一般</strong>模式</li></ul></li><li><strong>底行</strong>模式：<ul><li>可以进行<strong>强制退出不保存</strong>操作   <strong>q!</strong></li><li>可以进行<strong>保存并退出</strong>操作  <strong>wq</strong></li></ul></li></ul></li></ol><h2 id="3-5、grep-、-管道-、重定向输出-gt-gt"><a href="#3-5、grep-、-管道-、重定向输出-gt-gt" class="headerlink" title="3.5、grep 、 管道|、重定向输出&gt;&gt;"></a>3.5、<em>grep</em> 、 管道|、重定向输出&gt;&gt;</h2><h3 id="grep-正则表达式"><a href="#grep-正则表达式" class="headerlink" title="grep 正则表达式"></a><em>grep</em> 正则表达式</h3><ol><li><p>grep：正则表达式，进行字符串搜索工作</p><p>用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活</p></li><li><p><strong>语法</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 格式</span><br><span class="line">grep -i 需要搜索的字符串 搜索的文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 参数</span><br><span class="line">-i 忽略大小写查找数据</span><br></pre></td></tr></table></figure><p>符合规则，就会返回符合规则的<strong>行</strong></p></li></ol><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a><em>管道</em></h3><ol><li><p>管道命令： 可以连接多个Linux命令，其作用是<strong>将一个命令的输出用在另一个命令的输入</strong></p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1538638149167.png?raw=true" alt="1538638149167"></p></li><li><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令1 | 命令2 | 命令3……</span><br></pre></td></tr></table></figure></li><li><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">需求：查询当前目录中，所有带ins关键字的行数据</span><br><span class="line">位置：/root</span><br><span class="line">思考：查询当前目录内容  ll</span><br><span class="line"> 查询字符串，返回字符串所在行  grep</span><br><span class="line">命令：ll | grep ins</span><br><span class="line"></span><br><span class="line">需求：分页显示ls的help信息</span><br><span class="line">命令：ls --help | more</span><br></pre></td></tr></table></figure></li></ol><h3 id="重定向输出-gt-gt-gt"><a href="#重定向输出-gt-gt-gt" class="headerlink" title="重定向输出&gt; &gt;&gt;"></a>重定向输出&gt; &gt;&gt;</h3><ol><li><p>重定向输出</p><ul><li><p>&gt;</p><p>定向输出到文件，如果文件不存在，就创建文件；如果文件存在，就将其清空</p></li><li><p>&gt;&gt;</p><p>将输出内容追加到目标文件中。如果文件不存在，就创建文件；如果文件存在，则将新的内容追加到那个文件的末尾，该文件中的原有内容不受影响</p></li></ul><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1539671830735.png?raw=true" alt="1539671830735"></p></li><li><p>格式：</p><p>注意：</p></li><li><p>使用：</p><ul><li><p>将一个文件夹的内容保存到文本文件中去，也就是将<code>ls</code>命令打印出来的内容都写到文本中去可以这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> a.txt文件中就是ls命令打印出来的内容了</span><br><span class="line">ls -al &gt;&gt; a.txt</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="3-6、压缩、解压命令【重要】"><a href="#3-6、压缩、解压命令【重要】" class="headerlink" title="3.6、压缩、解压命令【重要】"></a>3.6、压缩、解压命令【重要】</h2><ol><li><p>Linux常见压缩包： <em>.tar        打包，大小不会进行压缩<br>​              </em>.tar.gz   打包并压缩文件大小</p></li><li><p><strong>压缩</strong>：(<strong>参数顺序不变</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">tar -zcvf 压缩包名字.tar.gz 需要压缩的内容</span><br><span class="line"></span><br><span class="line"># 参数</span><br><span class="line">-z 是否需要用 gzip 压缩</span><br><span class="line">-c 建立一个压缩文件的参数指令（create）--压缩</span><br><span class="line">-v 压缩的过程中显示文件（verbose）</span><br><span class="line">-f 使用档案名称，在 f 之后要立即接档名（file）</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：tar -zcvf hehe.tar.gz *   将当前目录下所有内容进行打包压缩，文件名hehe.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><strong>解压</strong>：(<strong>参数顺序不变</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 解压到当前目录</span><br><span class="line">tar -zxvf 需要解压的压缩包名称 解压到当前目录</span><br><span class="line"># 解压到指定目录</span><br><span class="line">tar -zxvf 需要解压的压缩包名称 -C 指定压缩路径  解压到指定目录中</span><br><span class="line"></span><br><span class="line"># 参数</span><br><span class="line">-z 是否需要用 gzip 压缩</span><br><span class="line">-x 解开一个压缩文件的参数指令（extract）--解压</span><br><span class="line">-v 压缩的过程中显示文件（verbose）</span><br><span class="line">-f 使用档名，在 f 之后要立即接档名（file）</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需求：需要把/root/t5/hehe.tar.gz  压缩包 解压到 指定目录中。指定目录/root/t5/t5</span><br><span class="line">位置：/root/t5</span><br><span class="line">命令：tar -zxvf hehe.tar.gz -C /root/t5/t5</span><br><span class="line">tar -zxvf hehe.tar.gz -C t5</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-7、系统命令"><a href="#3-7、系统命令" class="headerlink" title="3.7、系统命令"></a>3.7、系统命令</h2><h3 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h3><p>服务，是指常期运行，常驻内存中的进程，比如，apache、mysql、ssh等</p><h4 id="服务与端口"><a href="#服务与端口" class="headerlink" title="服务与端口"></a>服务与端口</h4><p>每个服务软件一般在运行时都会对应一个端口。<br>查看监听的端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss –lntp</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1539792074690.png?raw=true" alt="1539792074690"></p><h4 id="防火墙及防火墙设置"><a href="#防火墙及防火墙设置" class="headerlink" title="防火墙及防火墙设置"></a>防火墙及防火墙设置</h4><p>CentOS 7.0默认使用的是<code>firewall</code>作为防火墙，使用<code>iptables</code>必须重新设置一下</p><p>查看防火墙状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br><span class="line"><span class="meta">#</span> running 防火墙处于开启状态</span><br><span class="line"><span class="meta">#</span> not running 防火墙处于关闭状态</span><br></pre></td></tr></table></figure><h5 id="直接关闭防火墙"><a href="#直接关闭防火墙" class="headerlink" title="直接关闭防火墙"></a>直接关闭防火墙</h5><p>停止<strong>firewall</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>禁止<strong>firewall</strong>开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h4 id="查看系统进程：ps-ef"><a href="#查看系统进程：ps-ef" class="headerlink" title="查看系统进程：ps -ef"></a>查看系统进程：ps -ef</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需求：查看进程中 和 vim相关的进程</span><br><span class="line">命令：ps -ef|grep -i vim</span><br><span class="line"></span><br><span class="line">-e 　此参数的效果和指定&quot;A&quot;参数相同，显示所有程序</span><br><span class="line">-f 　显示UID,PPIP,C与STIME栏位</span><br></pre></td></tr></table></figure><h4 id="强制杀死某个进程：kill-9-pid号"><a href="#强制杀死某个进程：kill-9-pid号" class="headerlink" title="强制杀死某个进程：kill -9 pid号"></a>强制杀死某个进程：kill -9 pid号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">需求：查看进程 和 vim相关的进程有哪些，并将vim进程杀死</span><br><span class="line">命令：ps -ef|grep -i vim</span><br><span class="line"> Kill -9 pid号</span><br><span class="line">  </span><br><span class="line">-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称</span><br><span class="line">kill 9 表示强制终止</span><br></pre></td></tr></table></figure><ol><li>查看网络配置：<strong>ifconfig</strong><ul><li>显示网络设备</li></ul></li><li>测试和目标的连通性：<strong>ping 主机名或ip地址</strong><ul><li>测试与目标主机的连通性</li><li>会持续不断一直测试，直到ctrl+c</li></ul></li><li>Linux centos重启命令：<strong>reboot</strong></li><li>Linux centos关机命令：<strong>halt</strong></li></ol><h2 id="3-8、其他命令（了解）"><a href="#3-8、其他命令（了解）" class="headerlink" title="3.8、其他命令（了解）"></a>3.8、其他命令（了解）</h2><h3 id="chmod-文件权限"><a href="#chmod-文件权限" class="headerlink" title="chmod 文件权限"></a><em>chmod</em> 文件权限</h3><ol><li><p>hmod(change mode) 功能：变更文件或目录的权限</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">chmod [参数] [&lt;权限范围&gt;&lt;符号&gt;&lt;权限代号&gt;]</span><br><span class="line"></span><br><span class="line"># 参数</span><br><span class="line">-R或--recursive 　递归处理，将指定目录下的所有文件及子目录一并处理</span><br></pre></td></tr></table></figure><ul><li>权限范围的表示法如下：<ul><li>u：User，即文件或目录的拥有者</li><li>g：Group，即文件或目录的所属群组</li><li>o：Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围</li><li>a：All，即全部的用户，包含拥有者，所属群组以及其他用户</li></ul></li><li>符号：<ul><li>‘+’添加权限</li><li>‘-‘取消权限</li></ul></li><li>有关权限代号的部分，列表于下：<ul><li>r：读取权限，数字代号为”4”</li><li>w：写入权限，数字代号为”2”</li><li>x：执行或切换权限，数字代号为”1”</li><li>-：不具任何权限，数字代号为”0”</li></ul></li></ul></li><li><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir xxx</span><br><span class="line">ll | grep xxx</span><br><span class="line">chmod u-rwx xxx#取消xxx目录，用户“读写执行”权限</span><br><span class="line">chmod g-rwx xxx #取消xxx目录，组“读写执行”权限</span><br><span class="line">chmod 777 xxx#给xxx目录添加所有权限</span><br></pre></td></tr></table></figure></li><li><p>linux 权限格式：&lt;类型&gt;&lt;用户&gt;&lt;组&gt;&lt;其他用户&gt;</p><p><img src="https://raw.githubusercontent.com/xiongtianci-tc/myHexoBlog/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1543568285232.png" alt="img"></p></li></ol><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><ol><li><p>VIM命令配置</p><ul><li><p>网卡配置 cat /etc/sysconfig/network-scripts/ifcfg-eth0</p></li><li><p>概要信息如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0                 #网卡名称</span><br><span class="line">TYPE=Ethernet               #网卡类型</span><br><span class="line">ONBOOT=yes                  #是否开机启动网卡</span><br><span class="line">BOOTPROTO=static            #静态获取IP，其他取值：dhcp （如果设置dhcp下面红色不需要）</span><br><span class="line">IPADDR=192.168.44.100       #ip地址</span><br><span class="line">GATEWAY=192.168.44.2        #网关</span><br><span class="line">NETMASK=255.255.255.0       #子网掩码</span><br></pre></td></tr></table></figure></li></ul></li><li><p>setup设置</p><ol><li><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/clip_image002-1538642819190.jpg?raw=true" alt="img"> </p></li><li><p>选择“网络配置”</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/clip_image002-1538642858562.jpg?raw=true" alt="img"> </p></li><li><p>选择“设备配置”</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/clip_image001-1538642873407.png?raw=true" alt="img"> </p></li><li><p>选择“第一块网卡”</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1538642891449.png?raw=true" alt="1538642891449"> </p></li><li><p>设置IP地址等详细信息</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/clip_image001.png?raw=true" alt="img"> </p></li></ol></li></ol><h1 id="命令总结-和-帮助"><a href="#命令总结-和-帮助" class="headerlink" title="命令总结 和 帮助"></a>命令总结 和 帮助</h1><ul><li><p>内部命令：属于Shell解析器的一部分 （系统启动直接加载到内存的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd   切换目录（change directory）</span><br><span class="line">pwd  显示当前工作目录（print working directory）</span><br><span class="line">help 帮助</span><br></pre></td></tr></table></figure></li><li><p>外部命令：独立于Shell解析器之外的文件程序（独立的可执行文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls    显示文件和目录列表（list）</span><br><span class="line">mkdir 创建目录（make directoriy）</span><br><span class="line">cp    复制文件或目录（copy）</span><br></pre></td></tr></table></figure></li><li><p>查看帮助文档</p><ul><li><p>内部命令：help + 命令（eg：help cd）</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1538643143565.png?raw=true" alt="1538643143565"> </p></li><li><p>外部命令：man + 命令（eg：man ls）</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1538643159745.png?raw=true" alt="1538643159745"> </p></li></ul></li><li><p>不用特意记忆命令分类，开发中，如果需要查看命令参数，先使用<strong>man</strong>，如果没有结果，再使用<strong>help</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      Linux常用命令
    
    </summary>
    
      <category term="Linux" scheme="http://xiongtianci-tc.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://xiongtianci-tc.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣Top250资源合集</title>
    <link href="http://xiongtianci-tc.github.io/2018/11/29/%E8%B1%86%E7%93%A3Top250%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86/"/>
    <id>http://xiongtianci-tc.github.io/2018/11/29/豆瓣Top250资源合集/</id>
    <published>2018-11-28T17:45:30.000Z</published>
    <updated>2019-05-25T02:52:00.961Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><div style="display:flex;justify-content:center;"><font color="hotpink">点击影片”名称”即可获取资源链接</font></div></p><div style="display:flex;justify-content:flex-end"><font color="red"># 更新至Top1-Top100，敬请期待…</font></div><table border="1" style="text-align: center;"><thead><tr><th>排名</th><th>名称</th><th>年份</th><th>评分</th></tr></thead><tbody><tr><td>Top1</td><td><a href="https://pan.baidu.com/s/1Hl1j9BGzvxhdaRfGGGL2zQ" target="_blank" rel="noopener">肖申克的救赎</a></td><td>1994</td><td>9.6</td></tr><tr><td>Top2</td><td><a href="http://pan.baidu.com/s/1gfOr0Dd" target="_blank" rel="noopener">霸王别姬</a></td><td>1993</td><td>9.6</td></tr><tr><td>Top3</td><td><a href="http://pan.baidu.com/s/1bpNdERt" target="_blank" rel="noopener">这个杀手不太冷</a></td><td>1994</td><td>9.4</td></tr><tr><td>Top4</td><td><a href="https://pan.baidu.com/s/1o8Nejc2?fid=853395936269539" target="_blank" rel="noopener">阿甘正传</a></td><td>1994</td><td>9.4</td></tr><tr><td>Top5</td><td><a href="https://pan.baidu.com/s/14sshh?fid=738933366388433" target="_blank" rel="noopener">美丽人生</a></td><td>1997</td><td>9.5</td></tr><tr><td>Top6</td><td><a href="http://pan.baidu.com/s/1o7PiQ3w" target="_blank" rel="noopener">泰坦尼克号</a></td><td>1997</td><td>9.3</td></tr><tr><td>Top7</td><td><a href="https://pan.baidu.com/s/11xA1VNyZZlboNTckXywkxQ" target="_blank" rel="noopener">千与千寻</a></td><td>2001</td><td>9.3</td></tr><tr><td>Top8</td><td><a href="http://pan.baidu.com/s/1qXCTBic" target="_blank" rel="noopener">辛德勒的名单</a></td><td>1993</td><td>9.5</td></tr><tr><td>Top9</td><td><a href=" http://pan.baidu.com/s/1i5w3bkp" target="_blank" rel="noopener">盗梦空间</a></td><td>2010</td><td>9.3</td></tr><tr><td>Top10</td><td><a href="https://pan.baidu.com/s/1ge5y0nD?fid=923497949059553" target="_blank" rel="noopener">机器人总动员</a></td><td>2008</td><td>9.3</td></tr><tr><td>Top11</td><td><a href="https://pan.baidu.com/s/1mhQXQIG?fid=859409840409891" target="_blank" rel="noopener">忠犬八公的故事</a></td><td>2009</td><td>9.3</td></tr><tr><td>Top12</td><td><a href="http://pan.baidu.com/s/1eRFpHLK" target="_blank" rel="noopener">三傻大闹宝莱坞</a></td><td>2009</td><td>9.2</td></tr><tr><td>Top13</td><td><a href="http://pan.baidu.com/s/1boR7j3p" target="_blank" rel="noopener">海上钢琴师</a></td><td>1998</td><td>9.2</td></tr><tr><td>Top14</td><td><a href="http://pan.baidu.com/s/1eRDnUi2" target="_blank" rel="noopener">放牛班的春天</a></td><td>2004</td><td>9.2</td></tr><tr><td>Top15</td><td><a href="https://pan.baidu.com/s/1Cd9bMZjqWbhTS0wLKWfr_w?fid=351298108017917" target="_blank" rel="noopener">大话西游之大圣娶亲</a></td><td>1995</td><td>9.2</td></tr><tr><td>Top16</td><td><a href="https://pan.baidu.com/s/1GZ356B4GumSYp2afnrcCpg?fid=354248154465777" target="_blank" rel="noopener">楚门的世界</a></td><td>1998</td><td>9.2</td></tr><tr><td>Top17</td><td><a href="https://pan.baidu.com/s/1i3YIMAp?fid=1074753729212605" target="_blank" rel="noopener">教父</a></td><td>1972</td><td>9.2</td></tr><tr><td>Top18</td><td><a href="https://pan.baidu.com/s/14wznp?fid=823033633333159" target="_blank" rel="noopener">星际穿越</a></td><td>2014</td><td>9.2</td></tr><tr><td>Top19</td><td><a href="https://pan.baidu.com/s/1bo0FnXl?fid=252951322427901" target="_blank" rel="noopener">龙猫</a></td><td>1988</td><td>9.1</td></tr><tr><td>Top20</td><td><a href="https://pan.baidu.com/s/1zLis1PHuhxILsa7Ac7Wx9Q" target="_blank" rel="noopener">熔炉</a></td><td>2011</td><td>9.3</td></tr><tr><td>Top21</td><td><a href="https://pan.baidu.com/s/1MUAbY8A5kUaAh_6HXPCjqA" target="_blank" rel="noopener">无间道</a></td><td>2002</td><td>9.1</td></tr><tr><td>Top22</td><td><a href="https://pan.baidu.com/s/1nuSZ9ix?fid=703054725115319" target="_blank" rel="noopener">当幸福来敲门</a></td><td>2006</td><td>9.0</td></tr><tr><td>Top23</td><td><a href="https://pan.baidu.com/s/1FlfH_qZf38PlbwX9E512yA" target="_blank" rel="noopener">触不可及</a></td><td>2011</td><td>9.2</td></tr><tr><td>Top24</td><td><a href="https://pan.baidu.com/s/1s6_q9mZKLAKwNAh4O7-r3w" target="_blank" rel="noopener">怦然心动</a></td><td>2010</td><td>9.0</td></tr><tr><td>Top25</td><td><a href="https://pan.baidu.com/s/15svfI?fid=2938514528" target="_blank" rel="noopener">乱世佳人</a></td><td>1939</td><td>9.2</td></tr><tr><td>Top26</td><td><a href="https://pan.baidu.com/s/1jIvYj2m?fid=859083213231438" target="_blank" rel="noopener">疯狂动物城</a></td><td>2016</td><td>9.2</td></tr><tr><td>Top27</td><td><a href="https://pan.baidu.com/s/1gUs1lMPvhWLP8x_ijzpNGw" target="_blank" rel="noopener">蝙蝠侠：黑暗骑士</a></td><td>2008</td><td>9.1</td></tr><tr><td>Top28</td><td><a href="https://pan.baidu.com/s/1bqOlUAr?fid=1002856157420219" target="_blank" rel="noopener">天堂电影院</a></td><td>1988</td><td>9.1</td></tr><tr><td>Top29</td><td><a href="https://pan.baidu.com/s/1dE79wGx?fid=267490512661091" target="_blank" rel="noopener">活着</a></td><td>1994</td><td>9.1</td></tr><tr><td>Top30</td><td><a href="https://pan.baidu.com/s/1ZszH2VXTSPUAqNo8By1lfA" target="_blank" rel="noopener">少年派的奇幻漂流</a></td><td>2012</td><td>9.0</td></tr><tr><td>Top31</td><td><a href="https://pan.baidu.com/s/1IOy5uip6rYWhQsgbsxbB0g" target="_blank" rel="noopener">十二怒汉</a></td><td>1957</td><td>9.4</td></tr><tr><td>Top32</td><td><a href="https://pan.baidu.com/s/1gNtiJXKiXQ9DH0goLVuA2Q" target="_blank" rel="noopener">鬼子来了</a></td><td>2000</td><td>9.2</td></tr><tr><td>Top33</td><td><a href="https://pan.baidu.com/s/18wC7U?fid=254565905159819" target="_blank" rel="noopener">指环王3：王者无敌</a></td><td>2003</td><td>9.1</td></tr><tr><td>Top34</td><td><a href="https://pan.baidu.com/s/15m0uRMjTz07_TZ88L2uTUA" target="_blank" rel="noopener">控方证人</a></td><td>1957</td><td>9.6</td></tr><tr><td>Top35</td><td><a href="https://pan.baidu.com/s/1sjqhVGx?fid=906768803799193" target="_blank" rel="noopener">搏击俱乐部</a></td><td>1999</td><td>9.0</td></tr><tr><td>Top36</td><td><a href="https://pan.baidu.com/s/12MgZrABxuQ-oPNJ9auTgVA" target="_blank" rel="noopener">天空之城</a></td><td>1986</td><td>9.0</td></tr><tr><td>Top37</td><td><a href="https://pan.baidu.com/s/1Jc-0DcaIoJuUrtP2pH4vOg" target="_blank" rel="noopener">飞屋环游记</a></td><td>2009</td><td>8.9</td></tr><tr><td>Top38</td><td><a href="https://pan.baidu.com/s/10raMk?fid=973205912028341" target="_blank" rel="noopener">大话西游之月光宝盒</a></td><td>1995</td><td>8.9</td></tr><tr><td>Top39</td><td><a href="https://pan.baidu.com/s/13WJuB?fid=937467810241967" target="_blank" rel="noopener">罗马假日</a></td><td>1953</td><td>9.0</td></tr><tr><td>Top40</td><td><a href="https://pan.baidu.com/s/1sl3D0Gd#list/path=%2F" target="_blank" rel="noopener">摔跤吧！爸爸</a></td><td>2016</td><td>9.1</td></tr><tr><td>Top41</td><td><a href="https://pan.baidu.com/s/1TfnhXTgWsPub6HQwck3Oag" target="_blank" rel="noopener">窃听风暴</a></td><td>2006</td><td>9.1</td></tr><tr><td>Top42</td><td><a href="https://pan.baidu.com/s/14u2gB?fid=263900955744687" target="_blank" rel="noopener">辩护人</a></td><td>2013</td><td>9.2</td></tr><tr><td>Top43</td><td><a href="https://pan.baidu.com/share/link?shareid=558455183&uk=3623880440&fid=2141965982" target="_blank" rel="noopener">两杆大烟枪</a></td><td>1998</td><td>9.1</td></tr><tr><td>Top44</td><td><a href="https://pan.baidu.com/s/1-9SOF2mFoQSseIntwx_N9Q?fid=754656724538878" target="_blank" rel="noopener">闻香识女人</a></td><td>1992</td><td>9.0</td></tr><tr><td>Top45</td><td><a href="https://pan.baidu.com/s/1waI720ZTkEYh_KV_V102oQ" target="_blank" rel="noopener">哈尔的移动城堡</a></td><td>2004</td><td>8.9</td></tr><tr><td>Top46</td><td><a href="https://pan.baidu.com/s/1ifJ7h4Q_RWCsMOeRFY_RbA" target="_blank" rel="noopener">飞越疯人院</a></td><td>1975</td><td>9.0</td></tr><tr><td>Top47</td><td><a href="https://pan.baidu.com/s/1ge38MlH?fid=389555883875523" target="_blank" rel="noopener">死亡诗社</a></td><td>1989</td><td>9.0</td></tr><tr><td>Top48</td><td><a href="https://pan.baidu.com/s/1Js4qCj2GEQ9DF9hgkDL4cw" target="_blank" rel="noopener">V字仇杀队</a></td><td>2005</td><td>8.8</td></tr><tr><td>Top49</td><td><a href="https://pan.baidu.com/s/1gf4TipX?fid=309002731979882" target="_blank" rel="noopener">海豚湾</a></td><td>2009</td><td>9.3</td></tr><tr><td>Top50</td><td><a href="https://pan.baidu.com/s/1gfPWl0n?fid=95543062299217" target="_blank" rel="noopener">教父2</a></td><td>1974</td><td>9.1</td></tr><tr><td>Top51</td><td><a href="https://pan.baidu.com/s/15IgbR?fid=695943185158780" target="_blank" rel="noopener">指环王2：双塔奇兵</a></td><td>2002</td><td>9.0</td></tr><tr><td>Top52</td><td><a href="https://pan.baidu.com/s/19f0HS?fid=803394449358026" target="_blank" rel="noopener">指环王1：魔戒再现</a></td><td>2001</td><td>8.9</td></tr><tr><td>Top53</td><td><a href="https://pan.baidu.com/s/1Fo42K5QFS0ZLvnxFkmGVBQ" target="_blank" rel="noopener">美丽心灵</a></td><td>2001</td><td>8.9</td></tr><tr><td>Top54</td><td><a href="https://pan.baidu.com/s/1_GEJ_CoHeQuqUFtyzrwDIg" target="_blank" rel="noopener">饮食男女</a></td><td>1994</td><td>9.1</td></tr><tr><td>Top55</td><td><a href="https://pan.baidu.com/s/1O1Wi9V1ikEggIVpMMZSqZQ" target="_blank" rel="noopener">情书</a></td><td>1995</td><td>8.8</td></tr><tr><td>Top56</td><td><a href="https://pan.baidu.com/s/1jIBD8iU?fid=241575748710910" target="_blank" rel="noopener">素媛</a></td><td>2013</td><td>9.1</td></tr><tr><td>Top57</td><td><a href="https://pan.baidu.com/s/1acVbcpPFtCkuVaR0NuvVMA" target="_blank" rel="noopener">狮子王</a></td><td>1994</td><td>8.9</td></tr><tr><td>Top58</td><td><a href="https://pan.baidu.com/s/1ISIPJI1CzZ0wyxgchU7ZUQ" target="_blank" rel="noopener">钢琴家</a></td><td>2002</td><td>9.1</td></tr><tr><td>Top59</td><td><a href="https://pan.baidu.com/s/1Lr6zQTA94CbMXZP8CKePNA" target="_blank" rel="noopener">美国往事</a></td><td>1984</td><td>9.1</td></tr><tr><td>Top60</td><td><a href="https://pan.baidu.com/s/1e62DBaMv9qaYgP960B0dpQ" target="_blank" rel="noopener">小鞋子</a></td><td>1997</td><td>9.2</td></tr><tr><td>Top61</td><td><a href="https://pan.baidu.com/s/1K5Zgnm7DAFx_ZeNo18ayjA" target="_blank" rel="noopener">七宗罪</a></td><td>1995</td><td>8.8</td></tr><tr><td>Top62</td><td><a href="https://pan.baidu.com/s/1eoFq0O4ZrFo3mBs_3jPajA" target="_blank" rel="noopener">被嫌弃的松子的一生</a></td><td>2006</td><td>8.9</td></tr><tr><td>Top63</td><td><a href="https://pan.baidu.com/s/1KDC_qYq-nxCSAqZE0qDTIg" target="_blank" rel="noopener">致命魔术</a></td><td>2006</td><td>8.8</td></tr><tr><td>Top64</td><td><a href="https://pan.baidu.com/s/19a04jR2acwbTx2ho1v8Ejg" target="_blank" rel="noopener">本杰明·巴顿奇事</a></td><td>2008</td><td>8.8</td></tr><tr><td>Top65</td><td><a href="https://pan.baidu.com/s/1EwTT6TsO_yrrJxS0LVnOHw" target="_blank" rel="noopener">末代皇帝</a></td><td>1987</td><td>9.0</td></tr><tr><td>Top66</td><td><a href="https://pan.baidu.com/s/1XnhKY7Hxon8IQoTgUsFT_A?fid=1096320857195922" target="_blank" rel="noopener">西西里的美丽传说</a></td><td>2000</td><td>8.8</td></tr><tr><td>Top67</td><td><a href="https://pan.baidu.com/s/1453_7kpPiqeQnoG0LFiV5w" target="_blank" rel="noopener">天使爱美丽</a></td><td>2001</td><td>8.7</td></tr><tr><td>Top68</td><td><a href="https://pan.baidu.com/s/1ysPw4189zFZBDFm_Pe2FVA" target="_blank" rel="noopener">黑客帝国</a></td><td>1999</td><td>8.9</td></tr><tr><td>Top69</td><td><a href="https://pan.baidu.com/s/1AdCvtWEOE457L2mOCRJgPA" target="_blank" rel="noopener">让子弹飞</a></td><td>2010</td><td>8.7</td></tr><tr><td>Top70</td><td><a href="https://pan.baidu.com/s/1KkAEvlGPBjVcS_3ugScM_A" target="_blank" rel="noopener">拯救大兵瑞恩</a></td><td>1998</td><td>8.9</td></tr><tr><td>Top71</td><td><a href="https://pan.baidu.com/s/1bqFwEvl#list/path=%2F&parentPath=%2F%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90" target="_blank" rel="noopener">看不见的客人</a></td><td>2016</td><td>8.7</td></tr><tr><td>Top72</td><td><a href="https://pan.baidu.com/s/1EAE2GMs5tCz09Proae6uyw" target="_blank" rel="noopener">音乐之声</a></td><td>1965</td><td>8.9</td></tr><tr><td>Top73</td><td><a href="https://pan.baidu.com/s/1p_yW-ruXtEK5heKsFmQNUw" target="_blank" rel="noopener">低俗小说</a></td><td>1994</td><td>8.8</td></tr><tr><td>Top74</td><td><a href="https://pan.baidu.com/s/1WVXAxAM0I2b8SNIjDMGE0Q" target="_blank" rel="noopener">勇敢的心</a></td><td>1995</td><td>8.8</td></tr><tr><td>Top75</td><td><a href="https://pan.baidu.com/s/16XvuTxWzJh4s_w7-whqrOA" target="_blank" rel="noopener">剪刀手爱德华</a></td><td>1990</td><td>8.7</td></tr><tr><td>Top76</td><td><a href="https://pan.baidu.com/s/1mlcerfQxK3WForgNa6SKwg" target="_blank" rel="noopener">大闹天宫</a></td><td>1961196419782004</td><td>9.3</td></tr><tr><td>Top77</td><td><a href="https://pan.baidu.com/s/1pLgFPbX?fid=464690874078412" target="_blank" rel="noopener">沉默的羔羊</a></td><td>1991</td><td>8.8</td></tr><tr><td>Top78</td><td><a href="https://pan.baidu.com/s/1x7yq0ULCJtAtMtuVDemGRA" target="_blank" rel="noopener">蝴蝶效应</a></td><td>2004</td><td>8.7</td></tr><tr><td>Top79</td><td><a href="https://pan.baidu.com/s/1elizCqrt3kU7kHXjm_A-zQ" target="_blank" rel="noopener">哈利·波特与魔法石</a></td><td>2001</td><td>8.8</td></tr><tr><td>Top80</td><td><a href="https://pan.baidu.com/s/1gfOcT2r?fid=35225760102993" target="_blank" rel="noopener">春光乍泄</a></td><td>1997</td><td>8.8</td></tr><tr><td>Top81</td><td><a href="https://pan.baidu.com/s/1ZxEIADzr_rO3ZIDW5nGB3w" target="_blank" rel="noopener">入殓师</a></td><td>2008</td><td>8.8</td></tr><tr><td>Top82</td><td><a href="https://pan.baidu.com/s/1bGhs44VwbBZEqaaelsz8GQ" target="_blank" rel="noopener">心灵捕手</a></td><td>1997</td><td>8.8</td></tr><tr><td>Top83</td><td><a href="https://pan.baidu.com/s/13Lg1sGGb7aFN0oESt6F9Gw" target="_blank" rel="noopener">猫鼠游戏</a></td><td>2002</td><td>8.8</td></tr><tr><td>Top84</td><td><a href="https://pan.baidu.com/s/1pIugxrDIO6fZn7kqF-T2pw?fid=360967812964633" target="_blank" rel="noopener">布达佩斯大饭店</a></td><td>2014</td><td>8.8</td></tr><tr><td>Top85</td><td><a href="https://pan.baidu.com/s/15Lc06yp0Uu2-mrkDXa9V2g" target="_blank" rel="noopener">禁闭岛</a></td><td>2010</td><td>8.7</td></tr><tr><td>Top86</td><td><a href="https://pan.baidu.com/s/1ZhGG3ccQiZmr2CJYr6BhEA" target="_blank" rel="noopener">玛丽和马克思</a></td><td>2009</td><td>8.9</td></tr><tr><td>Top87</td><td><a href="https://pan.baidu.com/s/1GuL7JmjlihphuNpV5ENc_A" target="_blank" rel="noopener">阳光灿烂的日子</a></td><td>1994</td><td>8.8</td></tr><tr><td>Top88</td><td><a href="https://pan.baidu.com/s/1gnDTK-Y2GV-ywPky8b75vg" target="_blank" rel="noopener">第六感</a></td><td>1999</td><td>8.8</td></tr><tr><td>Top89</td><td><a href="https://pan.baidu.com/s/1iQ_obdzemXyp7sd9-YEsUA" target="_blank" rel="noopener">幽灵公主</a></td><td>1997</td><td>8.8</td></tr><tr><td>Top90</td><td><a href="https://pan.baidu.com/s/17_MV94EH_TKT8XElVrGzFw" target="_blank" rel="noopener">重庆森林</a></td><td>1994</td><td>8.7</td></tr><tr><td>Top91</td><td><a href="https://pan.baidu.com/s/1bA7IQEPDwSEQXmEbGhp1Jw" target="_blank" rel="noopener">狩猎</a></td><td>2012</td><td>9.1</td></tr><tr><td>Top92</td><td><a href="https://pan.baidu.com/s/1XCZDkMDTvfSKOkPY-8VVDQ" target="_blank" rel="noopener">致命ID</a></td><td>2003</td><td>8.7</td></tr><tr><td>Top93</td><td><a href="https://pan.baidu.com/s/1kd0rlbX-aAJsDZhzzjBusw" target="_blank" rel="noopener">穿条纹睡衣的男孩</a></td><td>2008</td><td>8.9</td></tr><tr><td>Top94</td><td><a href="https://pan.baidu.com/s/1cCdglN-WrcOgcIKSsq9d_w" target="_blank" rel="noopener">断背山</a></td><td>2005</td><td>8.7</td></tr><tr><td>Top95</td><td><a href="https://pan.baidu.com/s/1Z0TdybqvMFqiGf5AssaP_w" target="_blank" rel="noopener">加勒比海盗</a></td><td>2003</td><td>8.6</td></tr><tr><td>Top96</td><td><a href="https://pan.baidu.com/s/1-tx2TPNbGAKQgId6fz8geA" target="_blank" rel="noopener">大鱼</a></td><td>2003</td><td>8.7</td></tr><tr><td>Top97</td><td><a href="https://pan.baidu.com/s/126MI3BRV4xc8yPGveGHKzw" target="_blank" rel="noopener">阿凡达</a></td><td>2009</td><td>8.6</td></tr><tr><td>Top98</td><td><a href="https://pan.baidu.com/s/1ef5Yb_O7HSUKAy_Gkr7zlg" target="_blank" rel="noopener">摩登时代</a></td><td>1936</td><td>9.2</td></tr><tr><td>Top99</td><td><a href="https://pan.baidu.com/s/1ruqr3uwuVTYLIBv5XP77LQ" target="_blank" rel="noopener">告白</a></td><td>2010</td><td>8.7</td></tr><tr><td>Top100</td><td><a href="https://pan.baidu.com/s/1QvOiIg25WAtGBpE88AbOGw" target="_blank" rel="noopener">一一</a></td><td>2000</td><td>9.0</td></tr><tr><td>Top101</td><td><a href>射雕英雄传之东成西就</a></td><td>1993</td><td>8.7</td></tr><tr><td>Top102</td><td><a href>甜蜜蜜</a></td><td>1996</td><td>8.8</td></tr><tr><td>Top103</td><td><a href>阳光姐妹淘</a></td><td>2011</td><td>8.8</td></tr><tr><td>Top104</td><td><a href>消失的爱人</a></td><td>2014</td><td>8.7</td></tr><tr><td>Top105</td><td><a href>爱在黎明破晓前</a></td><td>1995</td><td>8.7</td></tr><tr><td>Top106</td><td><a href>上帝之城</a></td><td>2002</td><td>8.9</td></tr><tr><td>Top107</td><td><a href>小森林 夏秋篇</a></td><td>2014</td><td>8.9</td></tr><tr><td>Top108</td><td><a href>侧耳倾听</a></td><td>1995</td><td>8.8</td></tr><tr><td>Top109</td><td><a href>喜剧之王</a></td><td>1999</td><td>8.6</td></tr><tr><td>Top110</td><td><a href>倩女幽魂</a></td><td>1987</td><td>8.6</td></tr><tr><td>Top111</td><td><a href>恐怖直播</a></td><td>2013</td><td>8.7</td></tr><tr><td>Top112</td><td><a href>风之谷</a></td><td>1984</td><td>8.8</td></tr><tr><td>Top113</td><td><a href>爱在日落黄昏时</a></td><td>2004</td><td>8.8</td></tr><tr><td>Top114</td><td><a href>超脱</a></td><td>2011</td><td>8.8</td></tr><tr><td>Top115</td><td><a href>红辣椒</a></td><td>2006</td><td>8.9</td></tr><tr><td>Top116</td><td><a href>菊次郎的夏天</a></td><td>1999</td><td>8.8</td></tr><tr><td>Top117</td><td><a href>驯龙高手</a></td><td>2010</td><td>8.7</td></tr><tr><td>Top118</td><td><a href>幸福终点站</a></td><td>2004</td><td>8.7</td></tr><tr><td>Top119</td><td><a href>神偷奶爸</a></td><td>2010</td><td>8.5</td></tr><tr><td>Top120</td><td><a href>借东西的小人阿莉埃蒂</a></td><td>2010</td><td>8.7</td></tr><tr><td>Top121</td><td><a href>杀人回忆</a></td><td>2003</td><td>8.7</td></tr><tr><td>Top122</td><td><a href>七武士</a></td><td>1954</td><td>9.2</td></tr><tr><td>Top123</td><td><a href>岁月神偷</a></td><td>2010</td><td>8.6</td></tr><tr><td>Top124</td><td><a href>请以你的名字呼唤我</a></td><td>2017</td><td>8.8</td></tr><tr><td>Top125</td><td><a href>萤火虫之墓</a></td><td>1988</td><td>8.7</td></tr><tr><td>Top126</td><td><a href>怪兽电力公司</a></td><td>2001</td><td>8.6</td></tr><tr><td>Top127</td><td><a href>小森林 冬春篇</a></td><td>2015</td><td>9.0</td></tr><tr><td>Top128</td><td><a href>哈利·波特与死亡圣器(下)</a></td><td>2011</td><td>8.7</td></tr><tr><td>Top129</td><td><a href>谍影重重3</a></td><td>2007</td><td>8.7</td></tr><tr><td>Top130</td><td><a href>喜宴</a></td><td>1993</td><td>8.8</td></tr><tr><td>Top131</td><td><a href>东邪西毒</a></td><td>1994</td><td>8.6</td></tr><tr><td>Top132</td><td><a href>电锯惊魂</a></td><td>2004</td><td>8.7</td></tr><tr><td>Top133</td><td><a href>贫民窟的百万富翁</a></td><td>2008</td><td>8.5</td></tr><tr><td>Top134</td><td><a href>疯狂原始人</a></td><td>2013</td><td>8.7</td></tr><tr><td>Top135</td><td><a href>记忆碎片</a></td><td>2000</td><td>8.6</td></tr><tr><td>Top136</td><td><a href>7号房的礼物</a></td><td>2013</td><td>8.7</td></tr><tr><td>Top137</td><td><a href>黑天鹅</a></td><td>2010</td><td>8.5</td></tr><tr><td>Top138</td><td><a href>萤火之森</a></td><td>2011</td><td>8.8</td></tr><tr><td>Top139</td><td><a href>真爱至上</a></td><td>2003</td><td>8.5</td></tr><tr><td>Top140</td><td><a href>英雄本色</a></td><td>1986</td><td>8.6</td></tr><tr><td>Top141</td><td><a href>超能陆战队</a></td><td>2014</td><td>8.6</td></tr><tr><td>Top142</td><td><a href>雨人</a></td><td>1988</td><td>8.6</td></tr><tr><td>Top143</td><td><a href>心迷宫</a></td><td>2014</td><td>8.7</td></tr><tr><td>Top144</td><td><a href>蝙蝠侠：黑暗骑士崛起</a></td><td>2012</td><td>8.6</td></tr><tr><td>Top145</td><td><a href>卢旺达饭店</a></td><td>2004</td><td>8.9</td></tr><tr><td>Top146</td><td><a href>唐伯虎点秋香</a></td><td>1993</td><td>8.5</td></tr><tr><td>Top147</td><td><a href>海洋</a></td><td>2009</td><td>9.0</td></tr><tr><td>Top148</td><td><a href>傲慢与偏见</a></td><td>2005</td><td>8.5</td></tr><tr><td>Top149</td><td><a href>荒蛮故事</a></td><td>2014</td><td>8.8</td></tr><tr><td>Top150</td><td><a href>纵横四海</a></td><td>1991</td><td>8.7</td></tr><tr><td>Top151</td><td><a href>海边的曼彻斯特</a></td><td>2016</td><td>8.6</td></tr><tr><td>Top152</td><td><a href>教父3</a></td><td>1990</td><td>8.8</td></tr><tr><td>Top153</td><td><a href>虎口脱险</a></td><td>1966</td><td>8.9</td></tr><tr><td>Top154</td><td><a href>无人知晓</a></td><td>2004</td><td>9.1</td></tr><tr><td>Top155</td><td><a href>时空恋旅人</a></td><td>2013</td><td>8.7</td></tr><tr><td>Top156</td><td><a href>完美的世界</a></td><td>1993</td><td>9.0</td></tr><tr><td>Top157</td><td><a href>寻梦环游记</a></td><td>2017</td><td>9.0</td></tr><tr><td>Top158</td><td><a href>玩具总动员3</a></td><td>2010</td><td>8.8</td></tr><tr><td>Top159</td><td><a href>燃情岁月</a></td><td>1994</td><td>8.7</td></tr><tr><td>Top160</td><td><a href>花样年华</a></td><td>2000</td><td>8.5</td></tr><tr><td>Top161</td><td><a href>恋恋笔记本</a></td><td>2004</td><td>8.5</td></tr><tr><td>Top162</td><td><a href>达拉斯买家俱乐部</a></td><td>2013</td><td>8.7</td></tr><tr><td>Top163</td><td><a href>血战钢锯岭</a></td><td>2016</td><td>8.7</td></tr><tr><td>Top164</td><td><a href>二十二</a></td><td>2015</td><td>8.7</td></tr><tr><td>Top165</td><td><a href>雨中曲</a></td><td>1952</td><td>9.0</td></tr><tr><td>Top166</td><td><a href>魂断蓝桥</a></td><td>1940</td><td>8.8</td></tr><tr><td>Top167</td><td><a href>穿越时空的少女</a></td><td>2006</td><td>8.6</td></tr><tr><td>Top168</td><td><a href>猜火车</a></td><td>1996</td><td>8.5</td></tr><tr><td>Top169</td><td><a href>我是山姆</a></td><td>2001</td><td>8.8</td></tr><tr><td>Top170</td><td><a href>冰川时代</a></td><td>2002</td><td>8.5</td></tr><tr><td>Top171</td><td><a href>人工智能</a></td><td>2001</td><td>8.6</td></tr><tr><td>Top172</td><td><a href>爆裂鼓手</a></td><td>2014</td><td>8.6</td></tr><tr><td>Top173</td><td><a href>头脑特工队</a></td><td>2015</td><td>8.7</td></tr><tr><td>Top174</td><td><a href>被解救的姜戈</a></td><td>2012</td><td>8.6</td></tr><tr><td>Top175</td><td><a href>未麻的部屋</a></td><td>1997</td><td>8.8</td></tr><tr><td>Top176</td><td><a href>罗生门</a></td><td>1950</td><td>8.7</td></tr><tr><td>Top177</td><td><a href>浪潮</a></td><td>2008</td><td>8.7</td></tr><tr><td>Top178</td><td><a href>香水</a></td><td>2006</td><td>8.4</td></tr><tr><td>Top179</td><td><a href>朗读者</a></td><td>2008</td><td>8.5</td></tr><tr><td>Top180</td><td><a href>阿飞正传</a></td><td>1990</td><td>8.5</td></tr><tr><td>Top181</td><td><a href>你的名字。</a></td><td>2016</td><td>8.4</td></tr><tr><td>Top182</td><td><a href>房间</a></td><td>2015</td><td>8.8</td></tr><tr><td>Top183</td><td><a href>可可西里</a></td><td>2004</td><td>8.7</td></tr><tr><td>Top184</td><td><a href>恐怖游轮</a></td><td>2009</td><td>8.4</td></tr><tr><td>Top185</td><td><a href>模仿游戏</a></td><td>2014</td><td>8.6</td></tr><tr><td>Top186</td><td><a href>一个叫欧维的男人决定去死</a></td><td>2015</td><td>8.8</td></tr><tr><td>Top187</td><td><a href>一次别离</a></td><td>2011</td><td>8.7</td></tr><tr><td>Top188</td><td><a href>忠犬八公物语</a></td><td>1987</td><td>9.1</td></tr><tr><td>Top189</td><td><a href>战争之王</a></td><td>2005</td><td>8.6</td></tr><tr><td>Top190</td><td><a href>追随</a></td><td>1998</td><td>8.9</td></tr><tr><td>Top191</td><td><a href>魔女宅急便</a></td><td>1989</td><td>8.5</td></tr><tr><td>Top192</td><td><a href>撞车</a></td><td>2004</td><td>8.6</td></tr><tr><td>Top193</td><td><a href>谍影重重</a></td><td>2002</td><td>8.5</td></tr><tr><td>Top194</td><td><a href>完美陌生人</a></td><td>2016</td><td>8.6</td></tr><tr><td>Top195</td><td><a href>地球上的星星</a></td><td>2007</td><td>8.9</td></tr><tr><td>Top196</td><td><a href>牯岭街少年杀人事件</a></td><td>1991</td><td>8.8</td></tr><tr><td>Top197</td><td><a href>谍影重重2</a></td><td>2004</td><td>8.6</td></tr><tr><td>Top198</td><td><a href>哪吒闹海</a></td><td>1979</td><td>8.9</td></tr><tr><td>Top199</td><td><a href>惊魂记</a></td><td>1960</td><td>8.9</td></tr><tr><td>Top200</td><td><a href>青蛇</a></td><td>1993</td><td>8.5</td></tr><tr><td>Top201</td><td><a href>梦之安魂曲</a></td><td>2000</td><td>8.7</td></tr><tr><td>Top202</td><td><a href>无敌破坏王</a></td><td>2012</td><td>8.7</td></tr><tr><td>Top203</td><td><a href>黑客帝国3：矩阵革命</a></td><td>2003</td><td>8.6</td></tr><tr><td>Top204</td><td><a href>小萝莉的猴神大叔</a></td><td>2015</td><td>8.5</td></tr><tr><td>Top205</td><td><a href>再次出发之纽约遇见你</a></td><td>2013</td><td>8.5</td></tr><tr><td>Top206</td><td><a href>海街日记</a></td><td>2015</td><td>8.7</td></tr><tr><td>Top207</td><td><a href>新龙门客栈</a></td><td>1992</td><td>8.5</td></tr><tr><td>Top208</td><td><a href>东京物语</a></td><td>1953</td><td>9.2</td></tr><tr><td>Top209</td><td><a href>步履不停</a></td><td>2008</td><td>8.8</td></tr><tr><td>Top210</td><td><a href>终结者2：审判日</a></td><td>1991</td><td>8.6</td></tr><tr><td>Top211</td><td><a href>源代码</a></td><td>2011</td><td>8.4</td></tr><tr><td>Top212</td><td><a href>初恋这件小事</a></td><td>2010</td><td>8.3</td></tr><tr><td>Top213</td><td><a href>绿里奇迹</a></td><td>1999</td><td>8.7</td></tr><tr><td>Top214</td><td><a href>城市之光</a></td><td>1931</td><td>9.2</td></tr><tr><td>Top215</td><td><a href>末路狂花</a></td><td>1991</td><td>8.7</td></tr><tr><td>Top216</td><td><a href>爱在午夜降临前</a></td><td>2013</td><td>8.8</td></tr><tr><td>Top217</td><td><a href>疯狂的石头</a></td><td>2006</td><td>8.3</td></tr><tr><td>Top218</td><td><a href>秒速5厘米</a></td><td>2007</td><td>8.3</td></tr><tr><td>Top219</td><td><a href>无耻混蛋</a></td><td>2009</td><td>8.5</td></tr><tr><td>Top220</td><td><a href>这个男人来自地球</a></td><td>2007</td><td>8.5</td></tr><tr><td>Top221</td><td><a href>勇闯夺命岛</a></td><td>1996</td><td>8.6</td></tr><tr><td>Top222</td><td><a href>E.T. 外星人</a></td><td>1982</td><td>8.5</td></tr><tr><td>Top223</td><td><a href>碧海蓝天</a></td><td>1988</td><td>8.7</td></tr><tr><td>Top224</td><td><a href>变脸</a></td><td>1997</td><td>8.4</td></tr><tr><td>Top225</td><td><a href>卡萨布兰卡</a></td><td>1942</td><td>8.6</td></tr><tr><td>Top226</td><td><a href>黄金三镖客</a></td><td>1966</td><td>9.1</td></tr><tr><td>Top227</td><td><a href>发条橙</a></td><td>1971</td><td>8.5</td></tr><tr><td>Top228</td><td><a href>彗星来的那一夜</a></td><td>2013</td><td>8.4</td></tr><tr><td>Top229</td><td><a href>聚焦</a></td><td>2015</td><td>8.8</td></tr><tr><td>Top230</td><td><a href>海盗电台</a></td><td>2009</td><td>8.6</td></tr><tr><td>Top231</td><td><a href>美国丽人</a></td><td>1999</td><td>8.5</td></tr><tr><td>Top232</td><td><a href>血钻</a></td><td>2006</td><td>8.5</td></tr><tr><td>Top233</td><td><a href>非常嫌疑犯</a></td><td>1995</td><td>8.6</td></tr><tr><td>Top234</td><td><a href>国王的演讲</a></td><td>2010</td><td>8.3</td></tr><tr><td>Top235</td><td><a href>荒野生存</a></td><td>2007</td><td>8.6</td></tr><tr><td>Top236</td><td><a href>英国病人</a></td><td>1996</td><td>8.5</td></tr><tr><td>Top237</td><td><a href>黑鹰坠落</a></td><td>2001</td><td>8.6</td></tr><tr><td>Top238</td><td><a href>我爱你</a></td><td>2011</td><td>9.0</td></tr><tr><td>Top239</td><td><a href>迁徙的鸟</a></td><td>2001</td><td>9.1</td></tr><tr><td>Top240</td><td><a href>遗愿清单</a></td><td>2007</td><td>8.5</td></tr><tr><td>Top241</td><td><a href>勇士</a></td><td>2011</td><td>8.9</td></tr><tr><td>Top242</td><td><a href>荒岛余生</a></td><td>2000</td><td>8.5</td></tr><tr><td>Top243</td><td><a href>2001太空漫游</a></td><td>1968</td><td>8.7</td></tr><tr><td>Top244</td><td><a href>枪火</a></td><td>1999</td><td>8.7</td></tr><tr><td>Top245</td><td><a href>燕尾蝶</a></td><td>1996</td><td>8.6</td></tr><tr><td>Top246</td><td><a href>叫我第一名</a></td><td>2008</td><td>8.6</td></tr><tr><td>Top247</td><td><a href>穆赫兰道</a></td><td>2001</td><td>8.3</td></tr><tr><td>Top248</td><td><a href>千钧一发</a></td><td>1997</td><td>8.7</td></tr><tr><td>Top249</td><td><a href>大卫·戈尔的一生</a></td><td>2003</td><td>8.6</td></tr><tr><td>Top250</td><td><a href>上帝也疯狂</a></td><td>1980</td><td>8.7</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      《龙猫》 12.14不见不散
    
    </summary>
    
      <category term="电影资源" scheme="http://xiongtianci-tc.github.io/categories/%E7%94%B5%E5%BD%B1%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="公众号文章" scheme="http://xiongtianci-tc.github.io/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
      <category term="Top电影" scheme="http://xiongtianci-tc.github.io/tags/Top%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo+GitHub 搭建个人博客</title>
    <link href="http://xiongtianci-tc.github.io/2018/11/28/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xiongtianci-tc.github.io/2018/11/28/使用Hexo+GitHub搭建个人博客/</id>
    <published>2018-11-28T07:36:06.000Z</published>
    <updated>2019-05-25T03:05:19.238Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>昨天偶然看见一篇有关使用Hexo搭建个人博客的文章，瞬间吸引我的注意。今天使用的一天的时间在GitHub上搭建了一个个人博客，感觉还不错，分享给大家，并记录下我搭建过程中趟过的坑</p><p>环境：Win10 + Hexo + GitHub</p><p>效果展示：<a href="https://xiongtianci-tc.github.io/">脚印的博客</a></p></blockquote><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-了解Hexo"><a href="#1-了解Hexo" class="headerlink" title="1. 了解Hexo"></a>1. 了解Hexo</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h2 id="2-搭建Node-js环境"><a href="#2-搭建Node-js环境" class="headerlink" title="2. 搭建Node.js环境"></a>2. 搭建Node.js环境</h2><p>Hexo基于Node.js环境，那么我们搭建博客网站首先需要安装Node.js环境</p><p>下载地址：<a href="http://nodejs.cn/download" target="_blank" rel="noopener">http://nodejs.cn/download</a></p><p>详细安装文档：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><p>测试安装：命令行使用 <code>node -v</code> 、<code>npm -v</code>，查看显示版本号即成功。如下图：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543458424692.png?raw=true" alt="1543458424692"> </p><h2 id="3-注册Github账号"><a href="#3-注册Github账号" class="headerlink" title="3. 注册Github账号"></a>3. 注册Github账号</h2><p>这里用到Github，是因为我们需要通过Github得到自己的博客网站域名，而且需要使用gitHub同步我们个人博客的相关文件</p><p>注册地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com</a><br>注册流程：<a href="https://blog.csdn.net/p10010/article/details/51336332" target="_blank" rel="noopener">https://blog.csdn.net/p10010/article/details/51336332</a></p><blockquote><p>注意：注册Github的时候一定要选择一个合适的名字，因为后来博客网站的域名也会用到这个名字。虽然Github用户名支持后期修改，但是还是会带来很多不必要的麻烦</p></blockquote><h2 id="4-安装Git版本工具"><a href="#4-安装Git版本工具" class="headerlink" title="4. 安装Git版本工具"></a>4. 安装Git版本工具</h2><blockquote><p>使用Git可以帮助我们把本地的网页和文章等内容提交到Gihub上，实现同步</p></blockquote><ul><li><p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>Windows系统需下载，Mac系统因为自带Git无需操作</p><p>详细安装文档：<a href="https://blog.csdn.net/u013295518/article/details/78746007" target="_blank" rel="noopener">https://blog.csdn.net/u013295518/article/details/78746007</a></p><p>测试安装：<code>git --version</code>，查看显示版本号即成功。如下图：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543458907014.png?raw=true" alt="1543458907014"> </p></li><li><p>配置SSH：<a href="https://blog.csdn.net/qq_35246620/article/details/69061355" target="_blank" rel="noopener">https://blog.csdn.net/qq_35246620/article/details/69061355</a></p><p>SSH key添加之后，就可以在本机git bash中进行测试，输入<code>ssh -T git@github.com</code>进行测试</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543476938196.png?raw=true" alt="1543476938196"> </p><p>显示 <code>Hi username ！You&#39;ve successfully...</code> 说明ssh配置成功了</p></li></ul><h2 id="5-在本地安装-Hexo"><a href="#5-在本地安装-Hexo" class="headerlink" title="5. 在本地安装 Hexo"></a>5. 在本地安装 Hexo</h2><blockquote><p>Hexo是一个建站工具，可以帮助我们快速生成基本的博客文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><p>注意：在回车之后，可能会出现一行WARN的警告语句，不用管它，这个不妨碍安装</p><p>过一段时间如果出现hexo版本号之类的语句就代表差不多了</p></blockquote><p>然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure><p>这个时候你会看到命令行出现了一堆白字，紧接着输入<code>hexo v</code>查看是否安装成功：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543477381834.png?raw=true" alt="1543477381834"> </p><p>此时，Hexo已经安装完成</p><h1 id="二、搭建博客"><a href="#二、搭建博客" class="headerlink" title="二、搭建博客"></a>二、搭建博客</h1><h2 id="1-开启GitHub-Pages服务"><a href="#1-开启GitHub-Pages服务" class="headerlink" title="1. 开启GitHub Pages服务"></a>1. 开启GitHub Pages服务</h2><p>搭建我们的个人博客需要一个唯一的域名，当然我们可以申请购买一个域名来使用，但是在不是太必要的情况下，我们也可以通过Github Pages获得一个免费使用的域名，这需要我们在Github上新建一个仓库，如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543474709681.png?raw=true" alt="1543474709681"></p><p>这个过程和建立普通的仓库没什么区别，关键在于新仓库的名字，一定要是：</p><blockquote><p>仓库名固定：你的github的username.github.io</p></blockquote><p> 这也是之前强调的要起一个好的用户名的原因。这样之后我们最后的博客网站的链接就会是：<code>https://UserName.github.io</code>的形式。</p><p>点击<code>Create Repository</code>后，选着仓库的<code>Setting</code>进入设置</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543476148226.png?raw=true" alt="1543476148226"></p><p>往下滑找到 <code>Github Pages</code> 如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543477847990.png?raw=true" alt="1543477847990"></p><p>这里我们需要点击 <code>Choose a theme</code> 任意选择一个选择主题，然后界面会跳转到仓库，我们看到有两个文件如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543477980475.png?raw=true" alt="1543477980475"></p><p>点击 <code>Select theme</code> 选着主题后，此时若再查看setting，我们会看到开启GitHub Pages之后得到的域名如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543478176563.png?raw=true" alt="1543478176563"></p><p>输入你的 GitHub 的用户名和密码，成功后复制<code>https://username.github.io/</code>到浏览器打开就行。看！这就是你的博客了，只要能连接到互联网，就能随时查看它(๑•̀ㅂ•́)و✧！</p><h2 id="2-创建本地博客站点"><a href="#2-创建本地博客站点" class="headerlink" title="2. 创建本地博客站点"></a>2. 创建本地博客站点</h2><p>上述的步骤相当于我们使用Github page，创建了一个默认的博客页，并且得到了一个可外部访问的域名。但是这个博客页很Low。我们的目的是创建自己个性化的博客网站，所以我们使用Hexo在本地先创建一个本地博客站点，优化后再把它部署到github上。接下来我们使用控制台命令在本地一个合适的位置创建博客站点文件夹如下：</p><blockquote><p>hexo init  myHexoBlog       //myHexoBlog是项目名</p></blockquote><p>等一会，如果出现橙色的 <strong>WARN</strong> 没关系，只要不出现红色的 <strong>ERROR</strong> 就行。好了后，输入命令：</p><blockquote><p> hexo g      //g是generetor的缩写，生成博客</p><p> hexo s     //s是server的缩写，启动服务</p></blockquote><p>然后点开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，恭喜你！已经在本地搭建好博客了(๑•̀ㅂ•́)و✧！</p><h2 id="3-同步Github-允许公共访问"><a href="#3-同步Github-允许公共访问" class="headerlink" title="3. 同步Github,允许公共访问"></a>3. 同步Github,允许公共访问</h2><p>在本地我们已经搭建了博客，但是还只能自己本地访问。若要别人也能看到，那就需要我们将其同步部署到GitHub上了。还记得我们之前准备的Github仓库吗，这里就要用到了。<br>首先找到我们的博客仓库，并拷贝仓库地址：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543480461386.png?raw=true" alt="1543480461386"></p><p>然后修改本地博客目录的配置：<br>修改本地博客根目录下的<code>_config.yml</code>文件，修改<code>deploy</code>下的配置，如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543480729831.png?raw=true" alt="1543480729831"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xiongtianci-tc/xiongtianci-tc.github.io.git #复制的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>repository后面的内容是 <a href="mailto:git@gitbub.com" target="_blank" rel="noopener">git@gitbub.com</a>:username/库地址 的形式</li><li>type、repository、branch冒号的后面都有一个空格（切记~~）</li></ol></blockquote><p>最后执行控制台命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save //安装部署插件</span><br><span class="line"></span><br><span class="line">hexo d //部署到github</span><br></pre></td></tr></table></figure><p>现在，我们再次访问链接：<code>https://userName.github.io</code>，就会发现这里的界面和本地的一样了。如此一来我们搭建的个人博客网站就基本完成了。</p><h1 id="三、发布你的第一篇博客"><a href="#三、发布你的第一篇博客" class="headerlink" title="三、发布你的第一篇博客"></a>三、发布你的第一篇博客</h1><p>终于可以发布自己的第一篇博客了，是不是很激动？（博主当时可是超级激动的~）<br>首先，在本地博客文件夹根目录输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我个人博客的第一篇博客，激动~&quot;</span><br><span class="line">hexo g   //生成网页</span><br><span class="line">hexo d  //部署到远端(github)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543481316715.png?raw=true" alt="1543481316715"> </p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543481394185.png?raw=true" alt="1543481394185"> </p><p>现在打开我们的博客网站：<code>http://UserName.github.io</code>,会看到网页如下(可能需要刷新几次页面)：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543483567301.png?raw=true" alt="1543483567301"></p><p>需要编写博客内容时，只需编写本地博客的 <code>_posts</code> 的博客原文，然后通过 <code>hexo g &amp;&amp; hexo d</code> 重新部署到github即可</p><h1 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h1><p>此时，我们的个人博客已经搭建完成。但是我们需要网站更加高大上，更加美观些，我们可以通过更换主题来实现个性化博客</p><p>这里以使用github上的next主题为例：</p><h2 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1. 下载主题"></a>1. 下载主题</h2><p>next主题：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></p><p>在控制台中切换到本地博客根目录输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载成之后我们会看到next的主题已经存在 <code>thems</code> 里了如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543484274020.png?raw=true" alt="1543484274020"> </p><h2 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h2><p>修改博客根目录(不是next主题)下的 <code>_config.yml</code> 文件，搜索 <code>theme</code> 字段，并将其值修改为 <code>next</code></p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543484383922.png?raw=true" alt="1543484383922"> </p><p>然后在控制台下输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  //清理缓存</span><br><span class="line">hexo g    //重新生成博客代码</span><br><span class="line">hexo d   //部署到本地</span><br><span class="line">// 或者直接输入：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>再次打开我们的博客网站：<code>https://UserName.github.io</code>，将会发现我们的博客主题已经发生了改变</p><h1 id="五、个性化"><a href="#五、个性化" class="headerlink" title="五、个性化"></a>五、个性化</h1><p>通过此步骤我们可以设置博客的作者、格言、语言…</p><blockquote><p>在Hexo中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项</p></blockquote><h2 id="1-站点配置"><a href="#1-站点配置" class="headerlink" title="1. 站点配置"></a>1. 站点配置</h2><p>在本地的博客根目录下找到_config.yml，用编辑器打开进行内容的设置，如下：</p><p><img src="https://github.com/xiongtianci-tc/myHexoBlog/blob/master/img/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1543485321688.png?raw=true" alt="1543485321688"></p><p>这里可以修改博客网站的标题、描述，语言等属性</p><h2 id="2-主题设置"><a href="#2-主题设置" class="headerlink" title="2. 主题设置"></a>2. 主题设置</h2><p>网上有个超级详细的教程，我就不赘述了：</p><p>文档地址：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><hr><p>终于结束了，</p><p>最后，</p>]]></content>
    
    <summary type="html">
    
      搭建博客
    
    </summary>
    
      <category term="技术笔记" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="博客记录" scheme="http://xiongtianci-tc.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="http://xiongtianci-tc.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
